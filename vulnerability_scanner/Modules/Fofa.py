import requests
import base64
import pandas as pd
import time
import re

error = ""


def search_fofa(search_query, output_file, email, key, size):
    url = "https://fofa.info/api/v1/search/all"
    params_base = {
        "email": email,
        "key": key,
    }
    columns = ['IP地址', '端口', '协议名', '国家代码', '国家名', '区域', '城市', '地理位置 经度', '地理位置 纬度',
               'asn编号', 'asn组织', '主机名', '域名', '操作系统', '网站Server', 'ICP备案号', '网站标题', 'jarm 指纹',
               '网站header', '协议 banner', '基础协议', 'URL链接', '证书颁发者组织', '证书颁发者通用名称',
               '证书持有者组织', '证书持有者通用名称', '产品名', '产品分类', '版本号', 'FOFA最后更新时间', '域名cname']
    dfs = []  # 存储DataFrame的列表
    params = params_base.copy()
    base64_search = base64.b64encode(search_query.encode()).decode()
    params["qbase64"] = base64_search
    params["size"] = size
    params[
        "fields"] = "ip,port,protocol,country,country_name,region,city,longitude,latitude,as_number,as_organization,host,domain,os,server,icp,title,jarm,header,banner,cert,base_protocol,link,certs_issuer_org,certs_issuer_cn,certs_subject_org,certs_subject_cn,product,product_category,version,lastupdatetime,cname"
    try:
        response = requests.get(url, params=params, timeout=20)
        response.raise_for_status()  # 对 4xx/5xx 状态码抛出异常
        data = response.json()
        query = data.get('query', '')
        results = data.get('results', [])
        output_file.write(f'查询: {query}\n')
        output_file.write('结果:\n')
        for result in results:
            output_file.write(str(result) + '\n')
            fields = {columns[i]: result[i] for i in range(len(columns))}
            dfs.append(pd.DataFrame([fields]))  # 将数据存储到列表中作为DataFrame
        df = pd.concat(dfs, ignore_index=True)  # 使用concat方法合并所有DataFrame
        state = "查询成功，结果已保存"
    except (requests.RequestException, ValueError) as e:
        output_file.write(f"请求失败: {str(e)}\n")
        df = pd.DataFrame()  # 返回一个空的DataFrame
        state = f"请求失败: {str(e)}\n"
    except TimeoutError:
        output_file.write("请求超时\n")
        df = pd.DataFrame()  # 返回一个空的DataFrame
        state = "请求超时\n"
    except Exception as e:
        output_file.write(f"发生异常: {str(e)}\n")
        df = pd.DataFrame()  # 返回一个空的DataFrame
        state = f"发生异常: {str(e)}\n"
    return df, state


def save_to_excel(df, search_query):
    current_timestamp = time.time()
    current_time_str = time.strftime('%y%m%d%H%M%S', time.localtime(current_timestamp))
    replaced_string = re.sub('["*?<>|]', '', search_query).replace(f'\\', '').replace(f'/', '')
    name = current_time_str + '_' + replaced_string + '.xlsx'
    df.to_excel(name, index=False)
    print('结果已保存为', name)


def fofa(search_query, email, key, size=10):
    # 将左双引号和右双引号都替换为标准的 ASCII 双引号
    search_query = search_query.replace('“', '"').replace('”', '"').replace('：', ':')

    output_file = open("../search_log.txt", "w+", encoding="utf-8")
    Data = search_fofa(search_query, output_file, email, key, size)
    df = Data[0]
    output = Data[1]
    if not df.empty:
        save_to_excel(df, search_query)
    output_file.close()
    print(output)
    return output


if __name__ == "__main__":
    fofa(search_query='app="Jeecg"', email="", key="", size=100)
