from Config.Default_value import icon_v
from Modules.Cyberspace import Fofa


def Xopen_Hunter_window(self, Toplevel, tk):
    if hasattr(self, 'Hunter_window') and self.Hunter_window.winfo_exists():
        # 如果窗口已经存在，则将其带到前台
        self.Hunter_window.lift()
    else:
        # 如果窗口不存在，则创建一个新的鹰图窗口
        self.Hunter_window = Toplevel(self.root)
        self.Hunter_window.title("鹰图")
        self.Hunter_window.iconbitmap(icon_v("hunter"))
        canvas = tk.Canvas(self.Hunter_window, width=400, height=300)
        canvas.pack(fill=tk.BOTH, expand=True)

        # 创建一个框架，将内容放置在其中
        scrollable_frame = tk.Frame(canvas)

        # ---------------------------------------------------------------------------------------------
        email_label = tk.Label(scrollable_frame, text="已打开窗口，内容还没写")
        email_label.grid(row=0, column=0, sticky=tk.W)
        # ---------------------------------------------------------------------------------------------

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")


def Xopen_Fofa_window(self, Toplevel, tk):
    if hasattr(self, 'Fofa_window') and self.Fofa_window.winfo_exists():
        # 如果窗口已经存在，则将其带到前台
        self.Fofa_window.lift()
    else:
        # 如果窗口不存在，则创建一个新的FOFA窗口
        self.Fofa_window = Toplevel(self.root)
        self.Fofa_window.title("FOFA")
        # vulnerabilities_window.geometry("400x300")
        self.Fofa_window.iconbitmap(icon_v("fofa"))
        canvas = tk.Canvas(self.Fofa_window, width=400, height=300)
        canvas.pack(fill=tk.BOTH, expand=True)

        # 创建一个框架，将内容放置在其中
        scrollable_frame = tk.Frame(canvas)
        # ---------------------------------------------------------------------------------------------
        email_label = tk.Label(scrollable_frame, text="Email:")
        email_label.grid(row=0, column=0, sticky=tk.W)
        self.Fofa_entry_email = tk.Entry(scrollable_frame)
        self.Fofa_entry_email.grid(row=0, column=1, sticky=tk.W)
        self.Fofa_entry_email.insert(0, self.fofa_default_value_email)

        key_label = tk.Label(scrollable_frame, text="Key:")
        key_label.grid(row=1, column=0, sticky=tk.W)
        self.Fofa_entry_key = tk.Entry(scrollable_frame)
        self.Fofa_entry_key.grid(row=1, column=1, sticky=tk.W)
        self.Fofa_entry_key.insert(0, self.fofa_default_value_key)

        # 添加提交按钮
        submit_fofa_button = tk.Button(scrollable_frame, text="保存", command=self.submit_Fofa_save_text)
        submit_fofa_button.grid(row=2, column=0, columnspan=2, sticky=tk.W, pady=5)
        self.display_fofa_label = tk.Label(scrollable_frame, text="")
        self.display_fofa_label.grid(row=3, column=0, columnspan=2, sticky=tk.W)

        # -------------下-------------------------------------------------------------------------------
        search_label = tk.Label(scrollable_frame, text="FOFA语法:")
        search_label.grid(row=4, column=0, sticky=tk.W)
        self.Fofa_entry_search = tk.Entry(scrollable_frame)
        self.Fofa_entry_search.grid(row=4, column=1, sticky=tk.W)
        self.Fofa_entry_search.insert(0, self.fofa_default_value_search)

        size_label = tk.Label(scrollable_frame, text="输出数量:")
        size_label.grid(row=5, column=0, sticky=tk.W)
        self.Fofa_entry_size = tk.Entry(scrollable_frame)
        self.Fofa_entry_size.grid(row=5, column=1, sticky=tk.W)
        self.Fofa_entry_size.insert(0, self.fofa_default_value_size)
        # 添加go按钮
        submit_fofa_button_GO = tk.Button(scrollable_frame, text="GO", command=self.submit_Fofa_search_text)
        submit_fofa_button_GO.grid(row=6, column=0, columnspan=2, sticky=tk.W, pady=5)
        self.display_fofa_go_label = tk.Label(scrollable_frame, text="")
        self.display_fofa_go_label.grid(row=7, column=0, columnspan=2, sticky=tk.W)

        # ---------------------------------------------------------------------------------------------

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")


class MySubmit_Cyberspace:
    def __init__(self, Sf):
        self.Sf = Sf

    def Xsubmit_Fofa_search_text(self):
        """FOFA配置fofa查询提交按钮点击事件"""
        text3 = self.Sf.Fofa_entry_search.get()
        self.Sf.fofa_default_value_search = text3
        text4 = self.Sf.Fofa_entry_size.get()
        self.Sf.fofa_default_value_size = text4
        output_status = Fofa.fofa(search_query=self.Sf.fofa_default_value_search,
                                  email=self.Sf.fofa_default_value_email,
                                  key=self.Sf.fofa_default_value_key, size=self.Sf.fofa_default_value_size)
        go_text = output_status  # 获取output-status
        self.Sf.display_fofa_go_label.config(text=go_text)  # 更新标签以显示

    def call_method(self, X):
        if X == "Fofa_search":
            self.Xsubmit_Fofa_search_text()
        else:
            print(".........")
