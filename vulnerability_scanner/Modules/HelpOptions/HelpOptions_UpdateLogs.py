from Common.LoadJson import loadJson
from Config.Default_value import icon_v


def Xopen_UpdateLog_window(self,root,tk):
    """打开更新窗口"""
    # 检查是否已经存在更新窗口
    existing_windows = self.root.winfo_children()
    for window in existing_windows:
        if isinstance(window, tk.Toplevel) and window.title() == "新变化":
            window.lift()
            return

    # 如果不存在更新窗口，则创建一个新的更新窗口
    UpdateLog_window = tk.Toplevel(self.root)
    UpdateLog_window.title("新变化")
    UpdateLog_window.iconbitmap(icon_v("log"))
    UpdateLog_window.resizable(False, False)
    root.update_idletasks()
    root_width = root.winfo_width()
    root_height = root.winfo_height()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width - root_width) // 2
    y = (screen_height - root_height) // 2
    UpdateLog_window.geometry(f"+{x}+{y}")

    # 创建一个 Frame 来包含 Text 和 Scrollbar
    frame = tk.Frame(UpdateLog_window)
    frame.grid(row=0, column=0, sticky="nsew")

    text = loadJson()
    text_widget = tk.Text(frame, wrap="word")
    text_widget.insert(tk.END, text)
    text_widget.config(state=tk.DISABLED)  # 设置为只读
    text_widget.grid(row=0, column=0, sticky="nsew")  # 使用 grid 布局，使文本框填充整个 Frame

    # 添加垂直滚动条并关联
    scrollbar = tk.Scrollbar(frame, command=text_widget.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")  # 使用 grid 布局，使滚动条与文本框对齐
    text_widget.config(yscrollcommand=scrollbar.set)  # 关联滚动条

    # 设置 Frame 的行和列权重，使其可以自动扩展
    UpdateLog_window.grid_rowconfigure(0, weight=1)
    UpdateLog_window.grid_columnconfigure(0, weight=1)