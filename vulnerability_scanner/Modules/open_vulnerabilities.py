from Config.Default_value import icon_v


def Xvw(self, v_windows, tk):
    print(v_windows.title)
    v_windows.geometry("800x600")
    v_windows.iconbitmap(icon_v("loudongku"))
    canvas = tk.Canvas(v_windows, width=800, height=600)
    canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar = tk.Scrollbar(v_windows, orient=tk.VERTICAL, command=canvas.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    canvas.configure(yscrollcommand=scrollbar.set)

    scrollable_frame = tk.Frame(canvas)
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

    select_all_checkbox_var = tk.IntVar()
    select_all_checkbox = tk.Checkbutton(scrollable_frame, text="全选", variable=select_all_checkbox_var,
                                         command=lambda: self.select_all_vulnerabilities(
                                             select_all_checkbox_var))
    select_all_checkbox.pack(anchor=tk.W)

    proxy_checkbox = tk.Checkbutton(scrollable_frame, text="开启代理", variable=self.proxies_var)
    proxy_checkbox.pack(anchor=tk.W)

    serverj_checkbox = tk.Checkbutton(scrollable_frame, text="开启Server酱", variable=self.serverj_var)
    serverj_checkbox.pack(anchor=tk.W)

    detect_button = tk.Button(scrollable_frame, text="确定并开始",
                              command=lambda: self.detect_vulnerabilities_from_library_and_close(
                                  v_windows))
    detect_button.pack(anchor=tk.W, padx=5)

    # 清空已存在的变量列表
    self.vars.clear()
    if self.action_var == "xiaolong":
        for index, vulnerability in enumerate(self.vulnerability_list_xiaolong):
            var = tk.IntVar()
            self.vars.append(var)
            checkbox = tk.Checkbutton(scrollable_frame, text=vulnerability, variable=var)
            checkbox.pack(anchor=tk.W)
    elif self.action_var == "default":
        def Serial_Number():  # 给漏洞列表加序号
            snvl = self.vulnerability_list_def
            output = []
            for i in range(len(snvl)):
                value = snvl[i]
                output.append(f"{len(snvl) - i + 98}.{value}")
            return output

        for index, vulnerability in enumerate(Serial_Number()):
            var = tk.IntVar()
            self.vars.append(var)
            checkbox = tk.Checkbutton(scrollable_frame, text=vulnerability, variable=var)
            checkbox.pack(anchor=tk.W)

    def on_configure(event):
        canvas.configure(scrollregion=canvas.bbox("all"))

    scrollable_frame.bind("<Configure>", on_configure)
    canvas.bind("<Configure>", on_configure)

    canvas.bind_all("<MouseWheel>", lambda e: canvas.yview_scroll(-1 * int((e.delta / 120)), "units"))
