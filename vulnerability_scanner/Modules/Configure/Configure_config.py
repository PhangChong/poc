from Config.Basic.Default_value import icon_v


def Xopen_Peizi_proxy_window(self, Toplevel, tk, Checkbutton):
    """打开配置窗口"""
    if hasattr(self, 'Peizi_proxy_window') and self.Peizi_proxy_window.winfo_exists():
        # 如果窗口已经存在，则将其带到前台
        self.Peizi_proxy_window.lift()
    else:
        # 如果窗口不存在，则创建一个新的配置窗口
        self.Peizi_proxy_window = Toplevel(self.root)
        self.Peizi_proxy_window.title("代理配置")
        self.Peizi_proxy_window.iconbitmap(icon_v("serverj"))
        canvas = tk.Canvas(self.Peizi_proxy_window, width=400, height=300)
        canvas.pack(fill=tk.BOTH, expand=True)

        # 代理设置框架
        proxy_frame = tk.Frame(canvas)
        proxy_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        proxy_frame.grid_rowconfigure(5, weight=1)  # 添加一个空行以使得代理设置框架的布局能够扩展

        # 代理设置部分
        proxy_label = tk.Label(proxy_frame, text="开启代理：")
        proxy_label.grid(row=1, column=0, sticky=tk.W)
        proxy_checkbox = Checkbutton(proxy_frame, text=" ", variable=self.proxies_var)
        proxy_checkbox.grid(row=1, column=1, sticky=tk.W)

        ip_label = tk.Label(proxy_frame, text="IP地址：")
        ip_label.grid(row=2, column=0, sticky=tk.W)
        self.proxy_entry_ip = tk.Entry(proxy_frame)
        self.proxy_entry_ip.grid(row=2, column=1, sticky=tk.W)
        self.proxy_entry_ip.insert(0, self.proxies_default_value_ip)

        port_label = tk.Label(proxy_frame, text="端口：")
        port_label.grid(row=3, column=0, sticky=tk.W)
        self.proxy_entry_port = tk.Entry(proxy_frame)
        self.proxy_entry_port.grid(row=3, column=1, sticky=tk.W)
        self.proxy_entry_port.insert(0, self.proxies_default_value_port)

        submit_proxy_button = tk.Button(proxy_frame, text="保存", command=lambda: self.submit_Save_text("proxy"))
        submit_proxy_button.grid(row=4, column=0, columnspan=2, sticky=tk.W, pady=5)
        self.display_port_label = tk.Label(proxy_frame, text="")
        self.display_port_label.grid(row=5, column=0, columnspan=2, sticky=tk.W)

        canvas.create_window((0, 0), window=proxy_frame, anchor="nw")


def Xopen_Peizi_Serverj_window(self, Toplevel, tk, Checkbutton):
    """打开配置窗口"""
    if hasattr(self, 'Peizi_Serverj_window') and self.Peizi_Serverj_window.winfo_exists():
        # 如果窗口已经存在，则将其带到前台
        self.Peizi_Serverj_window.lift()
    else:
        # 如果窗口不存在，则创建一个新的配置窗口
        self.Peizi_Serverj_window = Toplevel(self.root)
        self.Peizi_Serverj_window.title("Server酱配置")
        self.Peizi_Serverj_window.iconbitmap(icon_v("serverj"))
        canvas = tk.Canvas(self.Peizi_Serverj_window, width=400, height=300)
        canvas.pack(fill=tk.BOTH, expand=True)

        # Server酱设置框架
        serverj_frame = tk.Frame(canvas)
        serverj_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        serverj_frame.grid_rowconfigure(5, weight=1)  # 添加一个空行以使得Server酱设置框架的布局能够扩展

        # Server酱设置部分
        serverj_label = tk.Label(serverj_frame, text="开启Server酱：")
        serverj_label.grid(row=1, column=0, sticky=tk.W)
        serverj_checkbox = Checkbutton(serverj_frame, text=" ", variable=self.serverj_var)
        serverj_checkbox.grid(row=1, column=1, sticky=tk.W)

        sjkey_label = tk.Label(serverj_frame, text="Server酱 Key：")
        sjkey_label.grid(row=2, column=0, sticky=tk.W)
        self.SJKey_entry = tk.Entry(serverj_frame)
        self.SJKey_entry.grid(row=2, column=1, sticky=tk.W)
        self.SJKey_entry.insert(0, self.serverj_default_value)

        submit_SJkey_button = tk.Button(serverj_frame, text="保存", command=lambda: self.submit_Save_text("SJKey"))
        submit_SJkey_button.grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=5)
        self.display_SJKey_label = tk.Label(serverj_frame, text="")
        self.display_SJKey_label.grid(row=4, column=0, columnspan=2, sticky=tk.W)

        canvas.create_window((0, 0), window=serverj_frame, anchor="nw")



class MySubmit_Config:
    def __init__(self, Sf):
        self.Sf = Sf

    def Xsubmit_proxy_text(self):
        """代理配置代理提交按钮点击事件"""
        text1 = self.Sf.proxy_entry_port.get()  # 获取输入框中的文本
        self.Sf.proxies_default_value_port = text1  # 保存输入框中的文本为默认值
        proxies_port = self.Sf.proxies_default_value_port
        text2 = self.Sf.proxy_entry_ip.get()  # 获取输入框中的文本
        self.Sf.proxies_default_value_ip = text2  # 保存输入框中的文本为默认值
        proxies_ip = self.Sf.proxies_default_value_ip
        self.Sf.display_port_label.config(text="代理端口成功设置为：" + proxies_ip + ":" + proxies_port)  # 更新Label显示的文本

    def Xsubmit_SJKey_text(self):
        """server酱配置key提交按钮点击事件"""
        text = self.Sf.SJKey_entry.get()  # 获取输入框中的文本
        self.Sf.serverj_default_value = text  # 保存输入框中的文本为默认值
        serverJ_key = self.Sf.serverj_default_value
        self.Sf.display_SJKey_label.config(text="保存成功，您提交的key为:" + serverJ_key)  # 更新Label显示的文本
        return serverJ_key

    def Xsubmit_Fofa_Save_text(self):
        """FOFA配置基础数据提交按钮点击事件"""
        text1 = self.Sf.Fofa_entry_email.get()
        self.Sf.fofa_default_value_email = text1
        text2 = self.Sf.Fofa_entry_key.get()
        self.Sf.fofa_default_value_key = text2
        self.Sf.display_fofa_label.config(text="保存成功")  # 更新Label显示的文本

    def call_method(self, X):
        if X == "proxy":
            self.Xsubmit_proxy_text()
        elif X == "SJKey":
            self.Xsubmit_SJKey_text()
        elif X == "Fofa_Save":
            self.Xsubmit_Fofa_Save_text()
        else:
            print("call_method方法.........")
