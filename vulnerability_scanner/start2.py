import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel, Checkbutton, IntVar, StringVar

import threading
import urllib3
from Modules import proxies
from Config import start_vulner_list
from Config.Default_value import serverj_default_value_key, fofa_default_value_email, \
    fofa_default_value_key, fofa_default_value_search, fofa_default_value_size, \
    proxies_default_value_port, proxies_default_value_ip, icon_v

from Config.Vulnerability_Detection import v_detection
from Modules.Configure.Configure_config import Xopen_Peizi_proxy_window, Xopen_Peizi_Serverj_window, \
    Xopen_Peizi_test_window, MySubmit_Config
from Modules.Cyberspace.Cyberspace_cssm import Xopen_Hunter_window, Xopen_Fofa_window, MySubmit_Cyberspace
from Modules.HelpOptions.HelpOptions_UpdateLogs import Xopen_UpdateLog_window
from poc.xlpoc.xiaolongpoc import xlpoc_detection
from Modules import open_vulnerabilities

# 禁用安全请求警告
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class VulnDetectionApp:
    def __init__(self, root):
        self.proxies_default_value_ip = proxies_default_value_ip
        self.proxies_default_value_port = proxies_default_value_port
        self.serverj_default_value = serverj_default_value_key
        self.fofa_default_value_email = fofa_default_value_email
        self.fofa_default_value_key = fofa_default_value_key
        self.fofa_default_value_search = fofa_default_value_search
        self.fofa_default_value_size = fofa_default_value_size
        self.root = root
        self.root.title("漏洞检测程序")
        self.root.geometry("1000x800")
        self.root.iconbitmap(icon_v("home"))
        self.vulnerability_list_def = start_vulner_list.def_vulnerability_list
        self.vulnerability_list_xiaolong = start_vulner_list.xiaolongPoc_list
        self.vars = []  # 存储选择框的变量

        self.create_variables()
        self.create_menu()

        self.create_input_text()
        self.create_output_text()

    def create_menu(self):
        """创建菜单"""
        menu_bar = tk.Menu(self.root)
        self.root.config(menu=menu_bar)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="选择文件", command=self.select_file)
        file_menu.add_command(label="保存输出结果", command=self.save_output)
        file_menu.add_separator()
        file_menu.add_command(label="退出", command=self.root.quit)
        menu_bar.add_cascade(label="菜单", menu=file_menu)

        vulnerabilities_menu = tk.Menu(menu_bar, tearoff=0)
        vulnerabilities_menu.add_command(label="默认漏洞库",
                                         command=lambda: self.open_vulnerabilities_window("default", "默认漏洞库"))
        vulnerabilities_menu.add_command(label="xl漏洞库(提取至xiaolong-poc(1-90))",
                                         command=lambda: self.open_vulnerabilities_window("xiaolong", "xiaolong漏洞库"))
        menu_bar.add_cascade(label="漏洞", menu=vulnerabilities_menu)

        self.create_menu_other(menu_bar)

    def create_menu_other(self, menu_bar):
        peizi_menu = tk.Menu(menu_bar, tearoff=0)
        peizi_menu.add_command(label="代理配置", command=self.open_Peizi_proxy_window)
        peizi_menu.add_command(label="Server酱", command=self.open_Peizi_Serverj_window)
        peizi_menu.add_command(label="测试", command=self.open_Peizi_test_window)
        menu_bar.add_cascade(label="配置", menu=peizi_menu)

        cyberspace_menu = tk.Menu(menu_bar, tearoff=0)
        cyberspace_menu.add_command(label="FOFA", command=self.open_Fofa_window)
        cyberspace_menu.add_command(label="Hunter鹰图", command=self.open_Hunter_window)
        menu_bar.add_cascade(label="网络空间测绘", menu=cyberspace_menu)

        help_menu = tk.Menu(menu_bar, tearoff=0)
        help_menu.add_command(label="新变化", command=self.open_UpdateLog_window)
        menu_bar.add_cascade(label="帮助", menu=help_menu)

    def create_input_text(self):
        """创建输入文本框"""
        self.input_frame = tk.Frame(self.root)
        self.input_frame.pack(pady=10, padx=10, fill=tk.X)  # 添加 fill=tk.X 以使框架水平填充

        self.file_label = tk.Label(self.input_frame, text="文件路径：")
        self.file_label.grid(row=0, column=0, padx=(0, 5))  # 放置在第0行第0列，右侧留有一些空白

        self.file_entry = tk.Entry(self.input_frame, width=30)  # 设置输入框的长度为30
        self.file_entry.grid(row=0, column=1)  # 放置在第0行第1列

        # 创建一个新的框架来包含检测和停止按钮
        button_subframe = tk.Frame(self.input_frame)
        button_subframe.grid(row=0, column=2, padx=(10, 0))  # 放置在第0行第2列，左侧留有一些空白

        self.detect_button = tk.Button(button_subframe, text="检测", command=self.detect_vulnerabilities, width=10)
        self.detect_button.grid(row=0, column=0, padx=(0, 5))  # 放置在第0行第0列

        self.stop_button = tk.Button(button_subframe, text="停止", command=self.stop_detection, width=10)
        self.stop_button.grid(row=0, column=1)  # 放置在第0行第1列

    def create_output_text(self):
        """创建输出文本框"""
        output_frame = tk.Frame(self.root)
        output_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.output_text = tk.Text(output_frame, bg="black", fg="white", state=tk.DISABLED, font=("Helvetica", 14))
        self.output_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # 添加垂直滚动条
        scrollbar = tk.Scrollbar(output_frame, command=self.output_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.output_text.configure(yscrollcommand=scrollbar.set)

        self.output_text.tag_configure("red", foreground="#FF0000", font=("Helvetica", 12, "bold"))
        self.output_text.tag_configure("green", foreground="#00FF00", font=("Helvetica", 12))
        self.output_text.tag_configure("yellow", foreground="yellow", font=("Helvetica", 12))

    def create_variables(self):
        """创建变量"""
        self.proxies_var = IntVar()
        self.proxies_var.set(0)

        self.serverj_var = IntVar()
        self.serverj_var.set(0)

        self.action_var = StringVar()
        self.action_var.set("default")

        self.stop_detection_flag = False

        self.LDK = ["default", "xiaolong"]

    def select_file(self):
        """选择文件"""
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(tk.END, file_path)

    def detect_vulnerabilities(self):
        print("detect_vulnerabilities", self.action_var)
        """检测漏洞"""
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("错误", "请输入文件路径")
            return

        # 检查是否选择了漏洞
        if not self.vars:
            messagebox.showerror("错误", "请选择漏洞")
            return

        with open(file_path, "r") as file:
            urls = file.read().splitlines()
        if self.action_var == "default":
            selected_vulnerabilities = [self.vulnerability_list_def[index] for index, var in enumerate(self.vars) if
                                        var.get() == 1]
        else:
            selected_vulnerabilities = [self.vulnerability_list_xiaolong[index] for index, var in enumerate(self.vars)
                                        if
                                        var.get() == 1]

        # 其他检测代码...
        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.config(state=tk.DISABLED)
        self.stop_detection_flag = False
        detection_thread = threading.Thread(target=self.perform_detection, args=(urls, selected_vulnerabilities))
        detection_thread.start()

    def perform_detection(self, urls, vulnerabilities):
        """执行漏洞检测"""
        # 代理启动开关
        if self.proxies_var.get() == 1:
            self.proxies = proxies.update_proxies(self.proxies_default_value_ip, self.proxies_default_value_port)
            print("已启动代理", self.proxies)
        else:
            self.proxies = None
        # server酱启动开关
        if self.serverj_var.get() == 1:
            serverJ_key = self.serverj_default_value
            print("server酱启动开关", serverJ_key)
        else:
            serverJ_key = " "

        for url in urls:
            if self.stop_detection_flag:
                break
            print("开始扫描链接：", url)
            for vulnerability in vulnerabilities:
                if self.action_var == "default":
                    v_detection(vulnerability, url, self.proxies, self.append_to_output, serverJ_key)
                if self.action_var == "xiaolong":
                    xlpoc_detection(vulnerability, url, self.proxies, self.append_to_output)
        if self.stop_detection_flag:
            self.append_to_output("已停止！！！！", "yellow")

    def save_output(self):
        """保存输出结果"""
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
        if file_path:
            with open(file_path, "w") as file:
                output_text = self.output_text.get("1.0", tk.END)
                file.write(output_text)

    def stop_detection(self):
        """停止检测"""
        self.stop_detection_flag = True
        self.append_to_output("已停止！！！！", "yellow")

    '''-------配置------------------------------'''

    def open_Peizi_proxy_window(self):
        Xopen_Peizi_proxy_window(self=self, Toplevel=Toplevel, tk=tk, Checkbutton=Checkbutton)

    def open_Peizi_Serverj_window(self):
        Xopen_Peizi_Serverj_window(self=self, Toplevel=Toplevel, tk=tk, Checkbutton=Checkbutton)

    def open_Peizi_test_window(self):
        Xopen_Peizi_test_window(self=self, Toplevel=Toplevel, tk=tk, Checkbutton=Checkbutton)

    '''-------网络空间测绘------------------------'''

    def open_Fofa_window(self):
        Xopen_Fofa_window(self=self, Toplevel=Toplevel, tk=tk)

    def open_Hunter_window(self):
        Xopen_Hunter_window(self=self, Toplevel=Toplevel, tk=tk)

    '''-------更新------------------------'''

    def open_UpdateLog_window(self):
        Xopen_UpdateLog_window(self=self, root=root, tk=tk)

    '''-------提交按钮------------------------'''

    def submit_proxy_text(self):
        MySubmit_Config(self).call_method("proxy")

    def submit_SJKey_text(self):
        MySubmit_Config(self).call_method("SJKey")

    def submit_Fofa_save_text(self):
        MySubmit_Config(self).call_method("Fofa")

    def submit_Fofa_search_text(self):
        MySubmit_Cyberspace(self).call_method("Fofa_search")

    '''-------漏洞库------------------------'''

    def open_vulnerabilities_window(self, var, title):
        self.action_var = var
        print("self.action_var=", var)
        for i in self.LDK:
            if i == var:
                current_window = f'vulnerabilities_window_{var}'
                if hasattr(self, current_window) and getattr(self, current_window).winfo_exists():
                    # 如果窗口已经存在，则将其带到前台
                    getattr(self, current_window).lift()
                else:
                    # 如果窗口不存在，则创建一个新的漏洞库窗口
                    setattr(self, current_window, Toplevel(self.root))
                    getattr(self, current_window).title(title)
                    open_vulnerabilities.Xbuilding_Vul_window(self=self, v_windows=getattr(self, current_window), tk=tk)
            else:
                opposite_window = f'vulnerabilities_window_{i}'
                print("opposite_window=", opposite_window)
                if hasattr(self, opposite_window) and getattr(self, opposite_window).winfo_exists():
                    # 如果窗口已经存在，则将其带到销毁
                    getattr(self, opposite_window).destroy()

    def select_all_vulnerabilities(self, select_all_var):
        """全选漏洞"""
        select_all_state = select_all_var.get()
        for var in self.vars:
            var.set(select_all_state)

    def detect_vulnerabilities_from_library(self, vulnerability_list):
        """从库中检测漏洞"""
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("错误", "请输入文件路径")
            return

        with open(file_path, "r") as file:
            urls = file.read().splitlines()

        selected_vulnerabilities = []
        for index, var in enumerate(self.vars):
            if var.get() == 1 and index < len(vulnerability_list):
                selected_vulnerabilities.append(vulnerability_list[index])
        print("选中的漏洞：", selected_vulnerabilities)  # 添加这行打印语句来检查选中的漏洞

        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.config(state=tk.DISABLED)

        self.stop_detection_flag = False

        detection_thread = threading.Thread(target=self.perform_detection, args=(urls, selected_vulnerabilities))
        detection_thread.start()

    def detect_vulnerabilities_from_library_and_close(self, vulnerabilities_window):
        if self.action_var == "xiaolong":
            """从库中检测漏洞并关闭窗口"""
            self.detect_vulnerabilities_from_library(self.vulnerability_list_xiaolong)  # 调用检测漏洞的方法
        else:
            """从库中检测漏洞并关闭窗口"""
            self.detect_vulnerabilities_from_library(self.vulnerability_list_def)  # 调用检测漏洞的方法
        vulnerabilities_window.destroy()  # 关闭漏洞库窗口

    def append_to_output(self, text, tag=None):
        """将文本添加到输出框"""
        if self.stop_detection_flag == True:
            print("停了")
            text = "已停止！！！！"
            tag = "yellow"
        else:
            pass
        self.output_text.config(state=tk.NORMAL)
        if tag:
            self.output_text.insert(tk.END, text + "\n", tag)
        else:
            self.output_text.insert(tk.END, text + "\n")
        self.output_text.config(state=tk.DISABLED)
        self.output_text.see(tk.END)


# 创建根窗口
root = tk.Tk()
# 创建应用实例
app = VulnDetectionApp(root)
# 进入主事件循环
root.mainloop()
