from __future__ import print_function
import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel, Checkbutton, IntVar

from requests.packages.urllib3.exceptions import InsecureRequestWarning

from poc import ceshi, CERIO_DT_Series_Router_Command_Vul_scan, Altenergy_Power_System_Control_scan, \
    Dahua_DSS_system_itcBulletin_SQL_injection_scan, Byzoro_Smart_Management_upload_scan, CVE_2024_2330_scan, \
    CVE_2024_27198_scan, ANHENG_Mingyu_security_gateway_file_upload_scan, Dahua_QVD_2023_45063_scan, \
    JS_ligerComboBox_information_scan, Hikvision_Operation_Management_Center_scan, HWL_2511_SSpopencgi_Command_scan, \
    Glodon_Linkworks_GetAllData_information_scan, JinsanZhongduan_v9_SQL_injection_scan, \
    FE_upload_Attachment_Servlet_scan, Lanling_EIS_SQL_vul_scan, Likeshop_File_upload_vuln_scan, Ivanti_VPN_RCE_scan, \
    NUUO_camera_command_scan, Multiple_gateway_security_devices_scan, NSFOCUS_bastionhost_privileges_scan, \
    Junos_webauth_operation_upload_scan, Lianda_OA_FileManage_UpLoadFile_scan, Uniview_video_surveillance_scan, \
    WordPres_Bricks_Builder_scan, seeyon_ucpclogin_passwordreset_scan, Telesquare_TLR_2005Ksh_RCE_scan, \
    Yongyou_getApp_SQL_scan, XMall_Open_Marketplace_SQL_Injection_scan, Tongda_OA_XSS_scan, \
    Toseiweb_network_test_Command_scan, yikatong_ailianyun_scan, Youdian_CMS_GetSpecial_SQL_vul_scan, \
    Telesquare_TLR_2005Ksh_scan, YouyongTPlus_InitServerInfo_SQL_injection_scan, Tongtianxing_CMSV6_vehicle_video_scan, \
    SFDI_Security_Management_System_test_qrcode_b_Command_Vuln_Scan
import threading
# import tableprint as tp
import requests
import start_vulner_list

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


# 禁用安全请求警告
class VulnDetection:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("红岸漏洞检测")
        self.root.geometry("1000x800")  # 设置窗口大小为800x600
        self.vulnerabilities = start_vulner_list.vulnerabilities

        self.vars = []  # 存储选择框的变量

        self.create_menu()
        self.create_input_text()
        self.create_output_text()
        self.create_buttons()
        self.proxies_var = IntVar()
        self.proxies_var.set(0)
        self.serverj_var = IntVar()
        self.serverj_var.set(0)
        self.proxies = None
        self.output_file_path = ""

        self.root.mainloop()

    # def close_window(self):
    #     self.root.destroy()
    def create_menu(self):
        menu_bar = tk.Menu(self.root)
        self.root.config(menu=menu_bar)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="选择文件", command=self.select_file)
        file_menu.add_command(label="保存输出结果", command=self.save_output)
        file_menu.add_separator()
        file_menu.add_command(label="退出", command=self.root.quit)

        menu_bar.add_cascade(label="文件", menu=file_menu)

        vulnerabilities_menu = tk.Menu(menu_bar, tearoff=0)
        vulnerabilities_menu.add_command(label="漏洞库", command=self.open_vulnerabilities_window)

        menu_bar.add_cascade(label="漏洞", menu=vulnerabilities_menu)

        ServerPeizi_menu = tk.Menu(menu_bar, tearoff=0)
        ServerPeizi_menu.add_command(label="Server酱配置", command=self.open_ServerPeizi_window)
        menu_bar.add_cascade(label="Server酱配置", menu=ServerPeizi_menu)

    def create_input_text(self):
        self.input_frame = tk.Frame(self.root)
        self.input_frame.pack()

        self.file_label = tk.Label(self.input_frame, text="文件路径：")
        self.file_label.pack(side=tk.LEFT)

        self.file_entry = tk.Entry(self.input_frame, width=50)
        self.file_entry.pack(side=tk.LEFT)

    def create_output_text(self):
        self.output_text = tk.Text(self.root, bg="black", fg="white", state=tk.DISABLED, font=("Helvetica", 14))
        self.output_text.pack(fill=tk.BOTH, expand=True)

        # Create a scrollbar and bind it to the text box
        scroll_bar = tk.Scrollbar(self.root, command=self.output_text.yview)
        scroll_bar.pack(side=tk.RIGHT, fill=tk.Y)
        self.output_text.configure(yscrollcommand=scroll_bar.set)

        # Configure the styles of the output text box
        self.output_text.tag_configure("red", foreground="#FF0000", font=("Helvetica", 12, "bold"))
        self.output_text.tag_configure("green", foreground="#00FF00", font=("Helvetica", 12))
        self.output_text.tag_configure("yellow", foreground="yellow", font=("Helvetica", 12))

    def create_buttons(self):
        self.button_frame = tk.Frame(self.root)
        self.button_frame.pack()

        self.detect_button = tk.Button(self.button_frame, text="检测", command=self.detect_vulnerabilities)
        self.detect_button.pack(side=tk.LEFT)

        self.stop_button = tk.Button(self.button_frame, text="停止", command=self.stop_detection)
        self.stop_button.pack(side=tk.LEFT)

    def select_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(tk.END, file_path)

    def detect_vulnerabilities(self):
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("错误", "请输入文件路径")
            return

        with open(file_path, "r") as file:
            urls = file.read().splitlines()

        selected_vulnerabilities = []
        for index, var in enumerate(self.vars):
            if var.get() == 1:
                selected_vulnerabilities.append(self.vulnerabilities[index])

        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.config(state=tk.DISABLED)

        self.stop_detection_flag = False

        detection_thread = threading.Thread(target=self.perform_detection, args=(urls, selected_vulnerabilities))
        detection_thread.start()

    def perform_detection(self, urls, vulnerabilities):
        if self.proxies_var.get() == 1:
            self.proxies = {
                'http': 'http://127.0.0.1:8080',
                'https': 'http://127.0.0.1:8080'
            }
        else:
            self.proxies = None

        if self.serverj_var.get() == 1:
            switch = "y"
        else:
            switch = "x"

        class Colors:
            BLUE = '\033[94m'
            GREEN = '\033[32m'
            RED = '\033[0;31m'
            DEFAULT = '\033[0m'
            ORANGE = '\033[33m'
            WHITE = '\033[97m'
            BOLD = '\033[1m'
            BR_COLOUR = '\033[1;37;40m'

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate"
        }

        for url in urls:
            if self.stop_detection_flag == True:
                break
            print(url)
            for vulnerability in vulnerabilities:
                if vulnerability == "致远OA ucpcLogin存在密码重置漏洞":
                    seeyon_ucpclogin_passwordreset_scan.scan_seeyon_ucpclogin_passwordreset(url, self.proxies, headers, self.append_to_output, serverJ=switch)
                if vulnerability == "金山终端安全系统V9.0 SQL注入漏洞":
                    JinsanZhongduan_v9_SQL_injection_scan.scan_JinsanZhongduan_v9_SQL_injection(url, self.proxies,
                                                                                                headers,
                                                                                                self.append_to_output,
                                                                                                serverJ=switch)
                if vulnerability == "通达OA存在反射XSS漏洞":
                    Tongda_OA_XSS_scan.scan_Tongda_OA_XSS(url, self.proxies, headers, self.append_to_output,
                                                          serverJ=switch)
                if vulnerability == "飞企互联FE业务协作平台uploadAttachmentServlet任意文件上传漏洞":
                    FE_upload_Attachment_Servlet_scan.scan_FE_upload_Attachment_Servlet(url, self.proxies, headers,
                                                                                        self.append_to_output,
                                                                                        serverJ=switch)
                if vulnerability == "用友畅捷通TPlus InitServerInfo存在SQL注入漏洞":
                    YouyongTPlus_InitServerInfo_SQL_injection_scan.scan_YouyongTPlus_InitServerInfo_SQL_injection(url,
                                                                                                                  self.proxies,
                                                                                                                  headers,
                                                                                                                  self.append_to_output,
                                                                                                                  serverJ=switch)
                if vulnerability == "联达OA FileManage-UpLoadFile存在任意文件上传漏洞":
                    Lianda_OA_FileManage_UpLoadFile_scan.scan_Lianda_OA_FileManage_UpLoadFile(url, self.proxies,
                                                                                              headers,
                                                                                              self.append_to_output,
                                                                                              serverJ=switch)
                if vulnerability == "测试漏洞（robots.txt）":
                    ceshi.scan_ceshi(url, self.proxies, headers, self.append_to_output, serverJ=switch, bugName=vulnerability)
                if vulnerability == "140.京师心智心理健康测评系统-账号密码泄露漏洞":
                    JS_ligerComboBox_information_scan.scan_JS_ligerComboBox_information(url, self.proxies, headers,
                                                                                        self.append_to_output,
                                                                                        serverJ=switch)
                if vulnerability == "139.JetBrains TeamCity 身份验证绕过漏洞(CVE-2024-27198)":
                    CVE_2024_27198_scan.scan_CVE_2024_27198(url, self.proxies, headers, self.append_to_output,
                                                            serverJ=switch)
                if vulnerability == "138.网康科技 NS-ASG 应用安全网关 SQL注入漏洞(CVE-2024-2330)":
                    CVE_2024_2330_scan.scan_CVE_2024_2330(url, self.proxies, headers, self.append_to_output,
                                                          serverJ=switch)
                if vulnerability == "137.蓝凌EIS智慧协同平台 rpt_listreport_defi露漏洞nefield.aspx SQL注入漏洞":
                    Lanling_EIS_SQL_vul_scan.scan_Lanling_EIS_SQL_vul(url, self.proxies, headers, self.append_to_output,
                                                                      serverJ=switch)
                if vulnerability == "136.广联达Linkworks GetAllData 信息泄露漏洞":
                    Glodon_Linkworks_GetAllData_information_scan.scan_Glodon_Linkworks_GetAllData_information(url,
                                                                                                              self.proxies,
                                                                                                              headers,
                                                                                                              self.append_to_output,
                                                                                                              serverJ=switch)
                if vulnerability == "135.通天星CMSV6 车载视频监控平台 信息泄露漏洞":
                    Tongtianxing_CMSV6_vehicle_video_scan.scan_Tongtianxing_CMSV6_vehicle_video(url, self.proxies,
                                                                                                headers,
                                                                                                self.append_to_output,
                                                                                                serverJ=switch)
                if vulnerability == "134.WordPres Bricks Builder 前台RCE漏洞(CVE-2024-25600)":
                    WordPres_Bricks_Builder_scan.scan_WordPres_Bricks_Builder(url, self.proxies, headers,
                                                                              self.append_to_output, serverJ=switch)
                if vulnerability == "133.友点CMS GetSpecial SQL注入漏洞":
                    Youdian_CMS_GetSpecial_SQL_vul_scan.scan_Youdian_CMS_GetSpecial_SQL_vul(url, self.proxies, headers,
                                                                                            self.append_to_output,
                                                                                            serverJ=switch)
                if vulnerability == "132.CERIO DT系列路由器命令执行漏洞":
                    CERIO_DT_Series_Router_Command_Vul_scan.scan_CERIO_DT_Series_Router_Command_Vul(url, self.proxies,
                                                                                                    headers,
                                                                                                    self.append_to_output,
                                                                                                    serverJ=switch)
                if vulnerability == "131.XMall开源商城SQL注入漏洞(CVE-2024-24112)":
                    XMall_Open_Marketplace_SQL_Injection_scan.scan_XMall_Open_Marketplace_SQL_Injection(url,
                                                                                                        self.proxies,
                                                                                                        headers,
                                                                                                        self.append_to_output,
                                                                                                        serverJ=switch)
                if vulnerability == "130.百卓Smart管理平台uploadfile.php文件上传漏洞(CVE-2024-0939)":
                    Byzoro_Smart_Management_upload_scan.scan_Byzoro_Smart_Management_upload(url, self.proxies, headers,
                                                                                            self.append_to_output,
                                                                                            serverJ=switch)
                if vulnerability == "129.大华智能物联综合管理平台 任意文件读取漏洞":
                    Dahua_QVD_2023_45063_scan.scan_Dahua_QVD_2023_45063(url, self.proxies, headers,
                                                                        self.append_to_output, serverJ=switch)

                if vulnerability == "128.用友移动管理系统 getApp SQL注入漏洞":
                    Yongyou_getApp_SQL_scan.scan_Yongyou_getApp_SQL(url, self.proxies, headers, self.append_to_output,
                                                                    serverJ=switch)
                if vulnerability == "127.Ivanti VPN RCE漏洞复现（CVE-2024-21887）":
                    Ivanti_VPN_RCE_scan.scan_Ivanti_VPN_RCE(url, self.proxies, headers,
                                                            self.append_to_output, serverJ=switch)
                if vulnerability == "125.安恒明御安全网关 aaa_local_web_preview文件上传漏洞":
                    ANHENG_Mingyu_security_gateway_file_upload_scan.scan_ANHENG_Mingyu_security_gateway_file_upload(url,
                                                                                                                    self.proxies,
                                                                                                                    headers,
                                                                                                                    self.append_to_output,
                                                                                                                    serverJ=switch)
                if vulnerability == "124.大华 DSS 数字监控系统 itcBulletin SQL 注入漏洞":
                    Dahua_DSS_system_itcBulletin_SQL_injection_scan.scan_Dahua_DSS_system_itcBulletin_SQL_injection(url,
                                                                                                                    self.proxies,
                                                                                                                    headers,
                                                                                                                    self.append_to_output,
                                                                                                                    serverJ=switch)
                if vulnerability == "123.绿盟 SAS堡垒机 local_user.php 权限绕过漏洞":
                    NSFOCUS_bastionhost_privileges_scan.scan_NSFOCUS_bastionhost_privileges(url, self.proxies, headers,
                                                                                            self.append_to_output,
                                                                                            serverJ=switch)
                if vulnerability == "122.宇视科技视频监控 main-cgi 文件信息泄露漏洞":
                    Uniview_video_surveillance_scan.scan_Uniview_video_surveillance(url, self.proxies, headers,
                                                                                    self.append_to_output,
                                                                                    serverJ=switch)
                if vulnerability == "121.多家网关-安全设备存在远程命令执行漏洞":
                    Multiple_gateway_security_devices_scan.scan_Multiple_gateway_security_devices(url, self.proxies,
                                                                                                  headers,
                                                                                                  self.append_to_output,
                                                                                                  serverJ=switch)
                if vulnerability == "120.Altenergy电力系统控制软件 RCE漏洞":
                    Altenergy_Power_System_Control_scan.scan_Altenergy_Power_System_Control(url, self.proxies, headers,
                                                                                            self.append_to_output,
                                                                                            serverJ=switch)
                if vulnerability == "119.海康运行管理中心 RCE漏洞":
                    Hikvision_Operation_Management_Center_scan.scan_Hikvision_Operation_Management_Center(url,
                                                                                                          self.proxies,
                                                                                                          headers,
                                                                                                          self.append_to_output,
                                                                                                          serverJ=switch)
                if vulnerability == "117.Junos webauth_operation.php 文件上传漏洞(CVE-2023-36844)":
                    Junos_webauth_operation_upload_scan.scan_Junos_webauth_operation_upload(url, self.proxies, headers,
                                                                                            self.append_to_output,
                                                                                            serverJ=switch)
                if vulnerability == "116.Telesquare TLR-2005Ksh 路由器 RCE漏洞":
                    Telesquare_TLR_2005Ksh_RCE_scan.scan_Telesquare_TLR_2005Ksh_RCE(url, self.proxies, headers,
                                                                                    self.append_to_output,
                                                                                    serverJ=switch)
                if vulnerability == "115.NUUO摄像头远程命令执行漏洞":
                    NUUO_camera_command_scan.scan_NUUO_camera_command(url, self.proxies, headers, self.append_to_output,
                                                                      serverJ=switch)
                if vulnerability == "114.Toseiweb管理端network_test.php参数远程命令执行漏洞":
                    Toseiweb_network_test_Command_scan.scan_Toseiweb_network_test_Command(url, self.proxies, headers,
                                                                                          self.append_to_output,
                                                                                          serverJ=switch)
                if vulnerability == "113.likeshop单商户商城系统任意文件上传漏洞":
                    Likeshop_File_upload_vuln_scan.scan_Likeshop_File_upload_vuln(url, self.proxies, headers,
                                                                                  self.append_to_output, serverJ=switch)
                if vulnerability == "112.HWL-2511-SSpopen.cgi命令执行漏洞":
                    HWL_2511_SSpopencgi_Command_scan.scan_HWL_2511_SSpopencgi_Command(url, self.proxies, headers,
                                                                                      self.append_to_output,
                                                                                      serverJ=switch)
                if vulnerability == "111.思福迪 运维安全管理系统 test_qrcode_b 远程命令执行漏洞":
                    SFDI_Security_Management_System_test_qrcode_b_Command_Vuln_Scan.Scan_SFDI_Security_Management_System_test_qrcode_b_Command_Vuln(
                        url, self.proxies, headers, self.append_to_output, serverJ=switch)
                if vulnerability == "110.Telesquare TLR-2005Ksh 路由器 getUsernamePassword 信息泄露":
                    Telesquare_TLR_2005Ksh_scan.scan_Telesquare_TLR_2005Ksh(url, self.proxies, headers,
                                                                            self.append_to_output, serverJ=switch)
                if vulnerability == "109.优卡特脸爱云一脸通智慧管理平台权限绕过漏洞(CVE-2023-6099)":
                    yikatong_ailianyun_scan.scan_yikatong_ailianyun(url, self.proxies, headers, self.append_to_output,
                                                                    serverJ=switch)

    def save_output(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
        if file_path:
            with open(file_path, "w") as file:
                output_text = self.output_text.get("1.0", tk.END)
                file.write(output_text)

    def stop_detection(self):
        self.stop_detection_flag = True
        self.append_to_output("已停止！！！！", "yellow")

    def append_to_output(self, text, tag=None):
        self.output_text.config(state=tk.NORMAL)
        if tag:
            self.output_text.insert(tk.END, text + "\n", tag)
        else:
            self.output_text.insert(tk.END, text + "\n")
        self.output_text.config(state=tk.DISABLED)
        self.output_text.see(tk.END)  # 滚动到最底部

    def open_ServerPeizi_window(self):
        # ServerPeizi_window = Toplevel(self.root)
        # ServerPeizi_window.title("配置")
        # ServerPeizi_window.geometry("%dx%d+%d+%d" % (480, 270, self.root.winfo_x() , self.root.winfo_y() ))
        # entry = tk.Entry(self.root)
        # entry.pack()
        pass

    def open_vulnerabilities_window(self):
        vulnerabilities_window = Toplevel(self.root)
        vulnerabilities_window.title("漏洞库")
        vulnerabilities_window.geometry("800x600")

        # 创建一个Canvas作为容器
        canvas = tk.Canvas(vulnerabilities_window, width=800, height=600)
        canvas.pack(fill=tk.BOTH, expand=True)

        # 创建一个滚动条，并绑定到Canvas
        scrollbar = tk.Scrollbar(vulnerabilities_window, command=canvas.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        canvas.configure(yscrollcommand=scrollbar.set)

        # 创建一个滚动区域框架，将内容放置在其中
        scrollable_frame = tk.Frame(canvas)
        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

        select_all_var = IntVar()
        select_all_checkbox = Checkbutton(scrollable_frame, text="全选", variable=select_all_var,
                                          command=lambda: self.select_all_vulnerabilities(select_all_var))
        select_all_checkbox.pack(anchor=tk.W)

        proxy_var = IntVar()
        proxy_checkbox = Checkbutton(scrollable_frame, text="开启代理", variable=self.proxies_var)
        proxy_checkbox.pack(anchor=tk.W)

        serverj_var = IntVar()
        serverj_checkbox = Checkbutton(scrollable_frame, text="开启Server酱", variable=self.serverj_var)
        serverj_checkbox.pack(anchor=tk.W)

        detect_button = tk.Button(scrollable_frame, text="检测", command=self.detect_vulnerabilities_from_library)
        detect_button.pack(anchor=tk.W, padx=5)

        for index, vulnerability in enumerate(self.vulnerabilities):
            var = IntVar()
            self.vars.append(var)
            checkbox = Checkbutton(scrollable_frame, text=vulnerability, variable=var)
            checkbox.pack(anchor=tk.W)

        # 配置Canvas以响应滚动条事件
        canvas.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

        # 绑定鼠标滚轮事件
        canvas.bind_all("<MouseWheel>", lambda e: canvas.yview_scroll(int(-1 * (e.delta / 120)), "units"))

    def print_entry_text(self):
        print(self.entry.get())

    def select_all_vulnerabilities(self, select_all_var):
        select_all_state = select_all_var.get()
        for var in self.vars:
            var.set(select_all_state)

    def detect_vulnerabilities_from_library(self):
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("错误", "请输入文件路径")
            return

        with open(file_path, "r") as file:
            urls = file.read().splitlines()

        selected_vulnerabilities = []
        for index, var in enumerate(self.vars):
            if var.get() == 1:
                selected_vulnerabilities.append(self.vulnerabilities[index])

        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.config(state=tk.DISABLED)

        self.stop_detection_flag = False

        detection_thread = threading.Thread(target=self.perform_detection, args=(urls, selected_vulnerabilities))
        detection_thread.start()


# 创建 VulnDetection 实例
vuln_detection = VulnDetection()

if __name__ == "__main__":
    VulnDetection()
