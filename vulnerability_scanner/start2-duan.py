import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel, Checkbutton, IntVar

import threading
import urllib3
from Modules import proxies
from Modules.fofa import FOFA
from Config import start_vulner_list
from Config.Default_value import serverj_default_value_key, fofa_default_value_email, \
    fofa_default_value_key, fofa_default_value_search, fofa_default_value_size, home_iconbitmap, \
    fofa_iconbitmap, hunter_iconbitmap, vulnerability_iconbitmap, proxies_default_value_port, Update_iconbitmap
from poc import ceshi,  JinsanZhongduan_v9_SQL_injection_scan, \
    FE_upload_Attachment_Servlet_scan,  Lianda_OA_FileManage_UpLoadFile_scan,  \
     Zhiyuan_OA_ucpclogin_pwd_reset_scan, Tongda_OA_XSS_scan,ChatGPT_Next_Web_XSS_CVE_2023_49785_scan, \
    XVE_2023_23744_scan, Bang_CRM_JILIYU_sql_scan, SpringBlade_errorlist_SQL_scan, JeePlus_validateMobile_SQL_scan

# 禁用安全请求警告
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class VulnDetectionApp:
    def __init__(self, root):
        self.proxies_default_value = proxies_default_value_port
        self.serverj_default_value = serverj_default_value_key
        self.fofa_default_value_email= fofa_default_value_email
        self.fofa_default_value_key = fofa_default_value_key
        self.fofa_default_value_search = fofa_default_value_search
        self.fofa_default_value_size = fofa_default_value_size
        self.root = root
        self.root.title("漏洞检测程序")
        self.root.geometry("1000x800")
        self.root.iconbitmap(home_iconbitmap)
        self.vulnerabilities = start_vulner_list.vulnerabilities
        self.vars = []  # 存储选择框的变量

        self.create_menu()
        self.create_input_text()
        self.create_output_text()
        self.create_buttons()
        self.create_variables()

    def create_menu(self):
        """创建菜单"""
        menu_bar = tk.Menu(self.root)
        self.root.config(menu=menu_bar)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="选择文件", command=self.select_file)
        file_menu.add_command(label="保存输出结果", command=self.save_output)
        file_menu.add_separator()
        file_menu.add_command(label="退出", command=self.root.quit)
        menu_bar.add_cascade(label="菜单", menu=file_menu)

        vulnerabilities_menu = tk.Menu(menu_bar, tearoff=0)
        vulnerabilities_menu.add_command(label="漏洞库", command=self.open_vulnerabilities_window)
        menu_bar.add_cascade(label="漏洞", menu=vulnerabilities_menu)

    def create_input_text(self):
        """创建输入文本框"""
        self.input_frame = tk.Frame(self.root)
        self.input_frame.pack(pady=10)

        self.file_label = tk.Label(self.input_frame, text="文件路径：")
        self.file_label.grid(row=0, column=0, padx=5)

        self.file_entry = tk.Entry(self.input_frame, width=50)
        self.file_entry.grid(row=0, column=1, padx=5)

    def create_output_text(self):
        """创建输出文本框"""
        output_frame = tk.Frame(self.root)
        output_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.output_text = tk.Text(output_frame, bg="black", fg="white", state=tk.DISABLED, font=("Helvetica", 14))
        self.output_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # 添加垂直滚动条
        scrollbar = tk.Scrollbar(output_frame, command=self.output_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.output_text.configure(yscrollcommand=scrollbar.set)

        self.output_text.tag_configure("red", foreground="#FF0000", font=("Helvetica", 12, "bold"))
        self.output_text.tag_configure("green", foreground="#00FF00", font=("Helvetica", 12))
        self.output_text.tag_configure("yellow", foreground="yellow", font=("Helvetica", 12))

    def create_buttons(self):
        """创建按钮"""
        self.button_frame = tk.Frame(self.root)
        self.button_frame.pack(pady=10)

        self.detect_button = tk.Button(self.button_frame, text="检测", command=self.detect_vulnerabilities, width=10)
        self.detect_button.grid(row=0, column=0, padx=5)

        self.stop_button = tk.Button(self.button_frame, text="停止", command=self.stop_detection, width=10)
        self.stop_button.grid(row=0, column=1, padx=5)

    def create_variables(self):
        """创建变量"""
        self.proxies_var = IntVar()
        self.proxies_var.set(0)

        self.serverj_var = IntVar()
        self.serverj_var.set(0)

    def select_file(self):
        """选择文件"""
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(tk.END, file_path)

    def detect_vulnerabilities(self):
        """检测漏洞"""
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("错误", "请输入文件路径")
            return

        # 检查是否选择了漏洞
        if not self.vars:
            messagebox.showerror("错误", "请选择漏洞")
            return

        with open(file_path, "r") as file:
            urls = file.read().splitlines()
        selected_vulnerabilities = [self.vulnerabilities[index] for index, var in enumerate(self.vars) if
                                    var.get() == 1]

        # 其他检测代码...
        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.config(state=tk.DISABLED)
        self.stop_detection_flag = False
        detection_thread = threading.Thread(target=self.perform_detection, args=(urls, selected_vulnerabilities))
        detection_thread.start()

    def perform_detection(self, urls, vulnerabilities):
        """执行漏洞检测"""
        # 代理启动开关
        if self.proxies_var.get() == 1:
            self.proxies = proxies.update_proxies(self.proxies_default_value)
            print("已启动代理", self.proxies)
        else:
            self.proxies = None
        # server酱启动开关
        if self.serverj_var.get() == 1:
            serverJ_key = self.serverj_default_value
            print("server酱启动开关",serverJ_key)
        else:
            serverJ_key = " "

        for url in urls:
            if self.stop_detection_flag:
                break
            print("链接：", url)
            for vulnerability in vulnerabilities:
                if vulnerability == "144.ChatGPT-Next-Web XSS漏洞(CVE-2023-49785)":
                    ChatGPT_Next_Web_XSS_CVE_2023_49785_scan.scan_ChatGPT_Next_Web_XSS_CVE_2023_49785(url, self.proxies,
                                                                                                      self.append_to_output,
                                                                                                      serverJ_key=serverJ_key,
                                                                                                      bugName=vulnerability)
                if vulnerability == "143.JeePlus快速开发平台 validateMobile SQL注入":
                    JeePlus_validateMobile_SQL_scan.scan_JeePlus_validateMobile_SQL(url,
                                                                                    self.proxies, self.append_to_output,
                                                                                    serverJ_key=serverJ_key,
                                                                                    bugName=vulnerability)
                if vulnerability == "142.SpringBlade errorlist SQL报错注入":
                    SpringBlade_errorlist_SQL_scan.scan_SpringBlade_errorlist_SQL(url,
                                                                                  self.proxies, self.append_to_output,
                                                                                  serverJ_key=serverJ_key,
                                                                                  bugName=vulnerability)
                if vulnerability == "141.帮管客 CRM jiliyu SQL注入漏洞":
                    Bang_CRM_JILIYU_sql_scan.scan_Bang_CRM_JILIYU_sql(url,
                                                                      self.proxies, self.append_to_output,
                                                                      serverJ_key=serverJ_key, bugName=vulnerability)
                if vulnerability == "140.通天星CMSV6车载定位监控平台 SQL注入漏洞(XVE-2023-23744)":
                    XVE_2023_23744_scan.scan_XVE_2023_23744(url,
                                                            self.proxies, self.append_to_output,
                                                            serverJ_key=serverJ_key, bugName=vulnerability)
                if vulnerability == "致远OA ucpcLogin存在密码重置漏洞":
                    Zhiyuan_OA_ucpclogin_pwd_reset_scan.scan_Zhiyuan_OA_ucpclogin_pwd_reset(url, self.proxies,
                                                                                            self.append_to_output,
                                                                                            serverJ_key=serverJ_key,
                                                                                            bugName=vulnerability)
                if vulnerability == "金山终端安全系统V9.0 SQL注入漏洞":
                    JinsanZhongduan_v9_SQL_injection_scan.scan_JinsanZhongduan_v9_SQL_injection(url, self.proxies,
                                                                                                self.append_to_output,
                                                                                                serverJ_key=serverJ_key,
                                                                                                bugName=vulnerability)
                if vulnerability == "通达OA存在反射XSS漏洞":
                    Tongda_OA_XSS_scan.scan_Tongda_OA_XSS(url, self.proxies, self.append_to_output,
                                                          serverJ_key=serverJ_key, bugName=vulnerability)
                if vulnerability == "飞企互联FE业务协作平台uploadAttachmentServlet任意文件上传漏洞":
                    FE_upload_Attachment_Servlet_scan.scan_FE_upload_Attachment_Servlet(url, self.proxies,
                                                                                        self.append_to_output,
                                                                                        serverJ_key=serverJ_key,
                                                                                        bugName=vulnerability)
                if vulnerability == "用友畅捷通TPlus InitServerInfo存在SQL注入漏洞":
                    YouyongTPlus_InitServerInfo_SQL_injection_scan.scan_YouyongTPlus_InitServerInfo_SQL_injection(url,
                                                                                                                  self.proxies,
                                                                                                                  self.append_to_output,
                                                                                                                  serverJ_key=serverJ_key,
                                                                                                                  bugName=vulnerability)
                if vulnerability == "联达OA FileManage-UpLoadFile存在任意文件上传漏洞":
                    Lianda_OA_FileManage_UpLoadFile_scan.scan_Lianda_OA_FileManage_UpLoadFile(url, self.proxies,
                                                                                              self.append_to_output,
                                                                                              serverJ_key=serverJ_key,
                                                                                              bugName=vulnerability)
                if vulnerability == "测试漏洞（robots.txt）":
                    ceshi.scan_ceshi(url, self.proxies, self.append_to_output, serverJ_key=serverJ_key,
                                     bugName=vulnerability)

        self.append_to_output("已停止！！！！", "yellow")
    def save_output(self):
        """保存输出结果"""
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
        if file_path:
            with open(file_path, "w") as file:
                output_text = self.output_text.get("1.0", tk.END)
                file.write(output_text)

    def stop_detection(self):
        """停止检测"""
        try:
            if self.stop_detection_flag == True:
                self.append_to_output("已停止！！！！", "yellow")
            else:
                self.append_to_output("停止ing！！！！", "yellow")
                self.stop_detection_flag = True
        except:
            self.append_to_output("已停止！！！！", "yellow")

    def append_to_output(self, text, tag=None):
            """将文本添加到输出框"""
            self.output_text.config(state=tk.NORMAL)
            if tag:
                self.output_text.insert(tk.END, text + "\n", tag)
            else:
                self.output_text.insert(tk.END, text + "\n")
            self.output_text.config(state=tk.DISABLED)
            self.output_text.see(tk.END)


    def open_vulnerabilities_window(self):
        if hasattr(self, 'vulnerabilities_window') and self.vulnerabilities_window.winfo_exists():
            # 如果窗口已经存在，则将其带到前台
            self.vulnerabilities_window.lift()
        else:
            # 如果窗口不存在，则创建一个新的漏洞库窗口
            self.vulnerabilities_window = Toplevel(self.root)
            self.vulnerabilities_window.title("漏洞库")
            self.vulnerabilities_window.geometry("800x600")
            self.vulnerabilities_window.iconbitmap(vulnerability_iconbitmap)

            canvas = tk.Canvas(self.vulnerabilities_window, width=800, height=600)
            canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

            scrollbar = tk.Scrollbar(self.vulnerabilities_window, orient=tk.VERTICAL, command=canvas.yview)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            canvas.configure(yscrollcommand=scrollbar.set)

            scrollable_frame = tk.Frame(canvas)
            canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

            select_all_checkbox_var = tk.IntVar()
            select_all_checkbox = tk.Checkbutton(scrollable_frame, text="全选", variable=select_all_checkbox_var,
                                                 command=lambda: self.select_all_vulnerabilities(
                                                     select_all_checkbox_var))
            select_all_checkbox.pack(anchor=tk.W)

            proxy_checkbox = tk.Checkbutton(scrollable_frame, text="开启代理", variable=self.proxies_var)
            proxy_checkbox.pack(anchor=tk.W)

            serverj_checkbox = tk.Checkbutton(scrollable_frame, text="开启Server酱", variable=self.serverj_var)
            serverj_checkbox.pack(anchor=tk.W)

            detect_button = tk.Button(scrollable_frame, text="确定并开始",
                                      command=self.detect_vulnerabilities_from_library_and_close)
            detect_button.pack(anchor=tk.W, padx=5)

            for index, vulnerability in enumerate(self.vulnerabilities):
                var = tk.IntVar()
                self.vars.append(var)
                checkbox = tk.Checkbutton(scrollable_frame, text=vulnerability, variable=var)
                checkbox.pack(anchor=tk.W)

            def on_configure(event):
                canvas.configure(scrollregion=canvas.bbox("all"))

            scrollable_frame.bind("<Configure>", on_configure)
            canvas.bind("<Configure>", on_configure)

            canvas.bind_all("<MouseWheel>", lambda e: canvas.yview_scroll(-1 * int((e.delta / 120)), "units"))

    def select_all_vulnerabilities(self, select_all_var):
        """全选漏洞"""
        select_all_state = select_all_var.get()
        for var in self.vars:
            var.set(select_all_state)

    def detect_vulnerabilities_from_library(self):
        """从库中检测漏洞"""
        file_path = self.file_entry.get().strip()
        if not file_path:
            messagebox.showerror("错误", "请输入文件路径")
            return

        with open(file_path, "r") as file:
            urls = file.read().splitlines()

        selected_vulnerabilities = []
        for index, var in enumerate(self.vars):
            if var.get() == 1 and index < len(self.vulnerabilities):
                selected_vulnerabilities.append(self.vulnerabilities[index])
        print("选中的漏洞：", selected_vulnerabilities)  # 添加这行打印语句来检查选中的漏洞

        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.config(state=tk.DISABLED)

        self.stop_detection_flag = False

        detection_thread = threading.Thread(target=self.perform_detection, args=(urls, selected_vulnerabilities))
        detection_thread.start()

    def detect_vulnerabilities_from_library_and_close(self):
        """从库中检测漏洞并关闭窗口"""
        self.detect_vulnerabilities_from_library()  # 调用检测漏洞的方法
        self.vulnerabilities_window.destroy()  # 关闭漏洞库窗口

# 创建根窗口
root = tk.Tk()
# 创建应用实例
app = VulnDetectionApp(root)
# 进入主事件循环
root.mainloop()
